[
	{
		"file": "source/unit_threaded/asserts.d",
		"name": "unit_threaded.asserts",
		"members": [
			{
				"members": [
					{
						"endchar": 1,
						"name": "assertEqual",
						"line": 8,
						"type": "@trusted void(T t, U u, string file = __FILE__, size_t line = __LINE__)",
						"parameters": [
							{
								"name": "t",
								"type": "T"
							},
							{
								"name": "u",
								"type": "U"
							},
							{
								"name": "file",
								"type": "string",
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"default": "__LINE__"
							}
						],
						"endline": 11,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "assertEqual",
				"line": 8,
				"comment": " Helper to call the standard assert\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "U",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "assertExceptionMsg",
						"line": 14,
						"type": "void(lazy E expr, string expected, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "expr",
								"type": "E",
								"storageClass": [
									"lazy"
								]
							},
							{
								"name": "expected",
								"type": "string"
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 48,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "assertExceptionMsg",
				"line": 14,
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/attrs.d",
		"name": "unit_threaded.attrs",
		"members": [
			{
				"name": "UnitTest",
				"line": 5,
				"char": 1,
				"kind": "enum"
			},
			{
				"name": "DontTest",
				"line": 6,
				"char": 1,
				"kind": "enum"
			},
			{
				"name": "Serial",
				"line": 7,
				"char": 1,
				"kind": "enum"
			},
			{
				"name": "SingleThreaded",
				"line": 9,
				"deco": "E13unit_threaded5attrs6Serial",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "HiddenTest",
				"line": 12,
				"comment": "Hide test. Not run by default but can be run.\n",
				"members": [
					{
						"offset": 0,
						"name": "reason",
						"line": 13,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"name": "ShouldFail",
				"line": 17,
				"comment": "The suite fails if the test passes.\n",
				"members": [
					{
						"offset": 0,
						"name": "reason",
						"line": 18,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"members": [
					{
						"name": "ShouldFailWith",
						"line": 22,
						"members": [
							{
								"name": "Type",
								"line": 23,
								"type": "T",
								"char": 5,
								"kind": "alias"
							},
							{
								"name": "reason",
								"line": 24,
								"type": "string",
								"char": 12,
								"kind": "variable"
							}
						],
						"char": 1,
						"kind": "struct"
					}
				],
				"name": "ShouldFailWith",
				"line": 22,
				"comment": "The suite fails unless the test throws T\n",
				"parameters": [
					{
						"name": "T",
						"deco": "C6object9Throwable",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"name": "Name",
				"line": 28,
				"comment": "Associate a name with a unittest block.\n",
				"members": [
					{
						"offset": 0,
						"name": "value",
						"line": 29,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"name": "Tags",
				"line": 33,
				"comment": "Associates one or more tags with the test\n",
				"members": [
					{
						"endchar": 53,
						"name": "this",
						"line": 34,
						"deco": "FNcAAyaXS13unit_threaded5attrs4Tags",
						"parameters": [
							{
								"name": "values",
								"deco": "AAya"
							}
						],
						"endline": 34,
						"originalType": "ref (string[] values...)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 52,
						"name": "this",
						"line": 35,
						"deco": "FNcAAyaZS13unit_threaded5attrs4Tags",
						"parameters": [
							{
								"name": "values",
								"deco": "AAya"
							}
						],
						"endline": 35,
						"originalType": "ref (string[] values)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 52,
						"name": "this",
						"line": 36,
						"deco": "FNcAyaZS13unit_threaded5attrs4Tags",
						"parameters": [
							{
								"name": "value",
								"deco": "Aya"
							}
						],
						"endline": 36,
						"originalType": "ref (string value)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"offset": 0,
						"name": "values",
						"line": 37,
						"deco": "AAya",
						"char": 14,
						"kind": "variable"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"name": "AutoTags",
				"line": 48,
				"comment": " Automatically assign @Tags for each parameterized test\n e.g.\n---------------\n@Values(\"foo\", \"bar\") @AutoTags unittest { ... }\n// there are now two unit tests, one for \"foo\" with tag \"foo\"\n// and one for \"bar\" with tag \"bar\"\n---------------\n",
				"char": 1,
				"kind": "enum"
			},
			{
				"members": [
					{
						"name": "Types",
						"line": 63,
						"members": [],
						"char": 1,
						"kind": "struct"
					}
				],
				"name": "Types",
				"line": 63,
				"comment": " Attachs these types to the a parametrized unit test.\n    The attached template function will be instantiated with\n    each type listed, e.g.\n\n    ----------------\n    @Types!(int, byte) void testInit(T)() { T.init.shouldEqual(0); }\n    ----------------\n\n    These would mean two testInit test runs.\n\n    Normally this would be a template but I don't know how to write\n  the UDA code to filter a template out\n",
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "Values",
						"line": 77,
						"type": "(T[] values...)",
						"parameters": [
							{
								"name": "values",
								"type": "T[]"
							}
						],
						"endline": 79,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "Values",
				"line": 77,
				"comment": " Used as a UDA for built-in unittests to enable value-parametrized tests.\n Example:\n -------\n @Values(1, 2, 3) unittest { assert(getValue!int % 2 == 0); }\n -------\n The example above results in unit_threaded running the unit tests 3 times,\n once for each value declared.\n\n See `getValue`.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "Values",
						"line": 81,
						"type": "(R values)",
						"parameters": [
							{
								"name": "values",
								"type": "R"
							}
						],
						"endline": 85,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "Values",
				"line": 81,
				"parameters": [
					{
						"name": "R",
						"kind": "type"
					}
				],
				"constraint": "from!\"std.range.primitives\".isInputRange!R",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "ValuesImpl",
						"line": 88,
						"members": [
							{
								"name": "values",
								"line": 89,
								"type": "T[]",
								"char": 9,
								"kind": "variable"
							}
						],
						"char": 1,
						"kind": "struct"
					}
				],
				"name": "ValuesImpl",
				"line": 88,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "getValue",
						"line": 96,
						"type": "T()",
						"endline": 98,
						"char": 3,
						"kind": "function"
					}
				],
				"name": "getValue",
				"line": 96,
				"comment": " Retrieves the current test value of type T in a built-in unittest.\n See `Values`.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "index",
						"defaultValue": "0",
						"deco": "i",
						"kind": "value"
					}
				],
				"char": 3,
				"kind": "template"
			},
			{
				"name": "Setup",
				"line": 105,
				"char": 1,
				"kind": "enum"
			},
			{
				"name": "Shutdown",
				"line": 106,
				"char": 1,
				"kind": "enum"
			},
			{
				"name": "Flaky",
				"line": 108,
				"members": [
					{
						"name": "defaultRetries",
						"line": 110,
						"comment": "the number of times to run the test\n",
						"deco": "i",
						"init": "10",
						"char": 10,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					},
					{
						"offset": 0,
						"name": "retries",
						"line": 111,
						"deco": "i",
						"init": "10",
						"char": 9,
						"kind": "variable"
					}
				],
				"char": 1,
				"kind": "struct"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/dub.d",
		"name": "unit_threaded.dub",
		"members": [
			{
				"name": "DubPackage",
				"line": 6,
				"members": [
					{
						"offset": 0,
						"name": "name",
						"line": 7,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 16,
						"name": "path",
						"line": 8,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 32,
						"name": "mainSourceFile",
						"line": 9,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 48,
						"name": "targetFileName",
						"line": 10,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 64,
						"name": "flags",
						"line": 11,
						"deco": "AAya",
						"char": 14,
						"kind": "variable"
					},
					{
						"offset": 80,
						"name": "importPaths",
						"line": 12,
						"deco": "AAya",
						"char": 14,
						"kind": "variable"
					},
					{
						"offset": 96,
						"name": "stringImportPaths",
						"line": 13,
						"deco": "AAya",
						"char": 14,
						"kind": "variable"
					},
					{
						"offset": 112,
						"name": "files",
						"line": 14,
						"deco": "AAya",
						"char": 14,
						"kind": "variable"
					},
					{
						"offset": 128,
						"name": "targetType",
						"line": 15,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 144,
						"name": "versions",
						"line": 16,
						"deco": "AAya",
						"char": 14,
						"kind": "variable"
					},
					{
						"offset": 160,
						"name": "dependencies",
						"line": 17,
						"deco": "AAya",
						"char": 14,
						"kind": "variable"
					},
					{
						"offset": 176,
						"name": "libs",
						"line": 18,
						"deco": "AAya",
						"char": 14,
						"kind": "variable"
					},
					{
						"offset": 192,
						"name": "active",
						"line": 19,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"name": "DubInfo",
				"line": 22,
				"members": [
					{
						"offset": 0,
						"name": "packages",
						"line": 23,
						"deco": "AS13unit_threaded3dub10DubPackage",
						"char": 18,
						"kind": "variable"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"endchar": 1,
				"name": "getDubInfo",
				"line": 26,
				"deco": "FNeAyaZS13unit_threaded3dub7DubInfo",
				"parameters": [
					{
						"name": "jsonString",
						"deco": "Aya"
					}
				],
				"endline": 50,
				"char": 9,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "getDubInfo",
				"line": 110,
				"deco": "FxbZS13unit_threaded3dub7DubInfo",
				"parameters": [
					{
						"name": "verbose",
						"deco": "xb"
					}
				],
				"endline": 142,
				"originalType": "DubInfo(in bool verbose)",
				"char": 9,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "isDubProject",
				"line": 144,
				"deco": "FZb",
				"endline": 147,
				"char": 6,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "dubify",
				"line": 151,
				"deco": "FKS13unit_threaded7runtime7OptionsZv",
				"parameters": [
					{
						"name": "options",
						"storageClass": [
							"ref"
						],
						"deco": "S13unit_threaded7runtime7Options"
					}
				],
				"endline": 164,
				"originalType": "void(ref from!\"unit_threaded.runtime\".Options options)",
				"char": 6,
				"kind": "function"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/factory.d",
		"name": "unit_threaded.factory",
		"members": [
			{
				"endchar": 1,
				"name": "createTestCases",
				"line": 13,
				"comment": " Creates tests cases from the given modules.\n If testsToRun is empty, it means run all tests.\n",
				"deco": "FxAS13unit_threaded10reflection8TestDataxAAyaZACQBs8testcase8TestCase",
				"parameters": [
					{
						"name": "testData",
						"deco": "xAS13unit_threaded10reflection8TestData"
					},
					{
						"name": "testsToRun",
						"deco": "xAAya",
						"default": "[]"
					}
				],
				"endline": 30,
				"originalType": "from!\"unit_threaded.testcase\".TestCase[](in from!\"unit_threaded.reflection\".TestData[] testData, in string[] testsToRun = [])",
				"char": 42,
				"kind": "function"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/from.d",
		"name": "unit_threaded.from",
		"members": [
			{
				"members": [],
				"name": "from",
				"line": 3,
				"parameters": [
					{
						"name": "moduleName",
						"deco": "Aya",
						"kind": "value"
					}
				],
				"char": 1,
				"kind": "template"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/integration.d",
		"name": "unit_threaded.integration",
		"members": [
			{
				"name": "mkdtemp",
				"line": 21,
				"deco": "UPaZQd",
				"parameters": [
					{
						"name": "template_",
						"deco": "Pa"
					}
				],
				"char": 21,
				"kind": "function"
			},
			{
				"name": "mkdir",
				"line": 12,
				"type": "extern (C) int(char*)",
				"parameters": [
					{
						"type": "char*"
					}
				],
				"char": 19,
				"kind": "function"
			},
			{
				"name": "mktemp",
				"line": 13,
				"type": "extern (C) char*(char* template_)",
				"parameters": [
					{
						"name": "template_",
						"type": "char*"
					}
				],
				"char": 21,
				"kind": "function"
			},
			{
				"endchar": 5,
				"name": "mkdtemp",
				"line": 14,
				"type": "char*(char* t)",
				"parameters": [
					{
						"name": "t",
						"type": "char*"
					}
				],
				"endline": 19,
				"char": 11,
				"kind": "function"
			},
			{
				"name": "Sandbox",
				"line": 44,
				"comment": " Responsible for creating a temporary directory to serve as a sandbox where\n files can be created, written to or deleted.\n",
				"members": [
					{
						"name": "defaultSandboxesPath",
						"line": 47,
						"deco": "Aya",
						"init": "\"tmp/unit-threaded\"",
						"char": 10,
						"kind": "variable",
						"storageClass": [
							"enum",
							"@safe"
						]
					},
					{
						"name": "sanboxesPath",
						"line": 48,
						"deco": "Aya",
						"init": "\"tmp/unit-threaded\"",
						"char": 19,
						"kind": "variable",
						"storageClass": [
							"static",
							"@safe"
						]
					},
					{
						"offset": 0,
						"name": "testPath",
						"line": 49,
						"deco": "Aya",
						"char": 12,
						"kind": "variable",
						"storageClass": [
							"@safe"
						]
					},
					{
						"endchar": 5,
						"name": "opCall",
						"line": 52,
						"comment": "Instantiate a Sandbox object\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_integration_d_59_0)\n---\nauto sb = Sandbox();\nassert(sb.testPath != \"\");\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_integration_d_59_0)\n",
						"deco": "FNfZS13unit_threaded11integration7Sandbox",
						"endline": 56,
						"char": 20,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "setPath",
						"line": 64,
						"deco": "FNfAyaZv",
						"parameters": [
							{
								"name": "path",
								"deco": "Aya"
							}
						],
						"endline": 68,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "resetPath",
						"line": 94,
						"deco": "FNfZv",
						"endline": 96,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "writeFile",
						"line": 99,
						"comment": "Write a file to the sandbox\n",
						"deco": "xFNfxAyaxQeZv",
						"parameters": [
							{
								"name": "fileName",
								"deco": "xAya"
							},
							{
								"name": "output",
								"deco": "xAya",
								"default": "\"\""
							}
						],
						"endline": 106,
						"originalType": "const @safe void(in string fileName, in string output = \"\")",
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "writeFile",
						"line": 109,
						"comment": "Write a file to the sanbox\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_integration_d_115_2)\n---\nimport std.file: exists;\nimport std.path: buildPath;\n\nwith(immutable Sandbox()) {\n    assert(!buildPath(testPath, \"foo.txt\").exists);\n    writeFile(\"foo.txt\");\n    assert(buildPath(testPath, \"foo.txt\").exists);\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_integration_d_115_2)\n",
						"deco": "xFNfxAyaxAQfZv",
						"parameters": [
							{
								"name": "fileName",
								"deco": "xAya"
							},
							{
								"name": "lines",
								"deco": "xAAya"
							}
						],
						"endline": 112,
						"originalType": "const @safe void(in string fileName, in string[] lines)",
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "shouldExist",
						"line": 137,
						"comment": "Assert that a file exists in the sandbox\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_integration_d_148_4)\n---\nwith(immutable Sandbox()) {\n    import unit_threaded.should;\n\n    shouldExist(\"bar.txt\").shouldThrow;\n    writeFile(\"bar.txt\");\n    shouldExist(\"bar.txt\");\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_integration_d_148_4)\n",
						"deco": "xFNfAyaxAyaxmZv",
						"parameters": [
							{
								"name": "fileName",
								"deco": "Aya"
							},
							{
								"name": "file",
								"deco": "xAya",
								"default": "__FILE__"
							},
							{
								"name": "line",
								"deco": "xm",
								"default": "cast(const(ulong))__LINE__"
							}
						],
						"endline": 145,
						"originalType": "const @safe void(string fileName, in string file = __FILE__, in size_t line = __LINE__)",
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "shouldNotExist",
						"line": 159,
						"comment": "Assert that a file does not exist in the sandbox\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_integration_d_170_5)\n---\nwith(immutable Sandbox()) {\n    import unit_threaded.should;\n\n    shouldNotExist(\"baz.txt\");\n    writeFile(\"baz.txt\");\n    shouldNotExist(\"baz.txt\").shouldThrow;\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_integration_d_170_5)\n",
						"deco": "xFNfAyaxAyaxmZv",
						"parameters": [
							{
								"name": "fileName",
								"deco": "Aya"
							},
							{
								"name": "file",
								"deco": "xAya",
								"default": "__FILE__"
							},
							{
								"name": "line",
								"deco": "xm",
								"default": "cast(const(ulong))__LINE__"
							}
						],
						"endline": 167,
						"originalType": "const @safe void(string fileName, in string file = __FILE__, in size_t line = __LINE__)",
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "shouldEqualLines",
						"line": 181,
						"comment": "read a file in the test sandbox and verify its contents\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_integration_d_192_6)\n---\nwith(immutable Sandbox()) {\n    import unit_threaded.should;\n\n    writeFile(\"lines.txt\", [\"foo\", \"toto\"]);\n    shouldEqualLines(\"lines.txt\", [\"foo\", \"bar\"]).shouldThrow;\n    shouldEqualLines(\"lines.txt\", [\"foo\", \"toto\"]);\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_integration_d_192_6)\n",
						"deco": "xFNexAyaxAQfAyamZv",
						"parameters": [
							{
								"name": "fileName",
								"deco": "xAya"
							},
							{
								"name": "lines",
								"deco": "xAAya"
							},
							{
								"name": "file",
								"deco": "Aya",
								"default": "__FILE__"
							},
							{
								"name": "line",
								"deco": "m",
								"default": "cast(ulong)__LINE__"
							}
						],
						"endline": 189,
						"originalType": "const @trusted void(in string fileName, in string[] lines, string file = __FILE__, size_t line = __LINE__)",
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "sandboxPath",
						"line": 202,
						"deco": "xFNaNbNiNfZAya",
						"endline": 204,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "inSandboxPath",
						"line": 206,
						"deco": "xFNaNbNfxAyaZAya",
						"parameters": [
							{
								"name": "fileName",
								"deco": "xAya"
							}
						],
						"endline": 209,
						"originalType": "const pure nothrow @safe string(in string fileName)",
						"char": 12,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "struct"
			}
		],
		"comment": " This module implements functionality helpful for writing integration tests\n as opposed to the unit variety where unit-tests are defined as not\n having global side-effects. In constrast, this module implements\n assertions that check for global side-effects such as writing to the\n file system.\n",
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/io.d",
		"name": "unit_threaded.io",
		"members": [
			{
				"members": [
					{
						"endchar": 1,
						"name": "writelnUt",
						"line": 12,
						"type": "void(auto ref T args)",
						"parameters": [
							{
								"name": "args",
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 16,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "writelnUt",
				"line": 12,
				"comment": " Write if debug output was enabled.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"name": "_useEscCodes",
				"line": 101,
				"deco": "b",
				"char": 6,
				"kind": "variable"
			},
			{
				"name": "_escCodes",
				"line": 102,
				"deco": "AAya",
				"init": "[\"\\x1b[31;1m\", \"\\x1b[32;1m\", \"\\x1b[33;1m\", \"\\x1b[0;;m\"]",
				"char": 6,
				"kind": "variable",
				"storageClass": [
					"enum"
				]
			},
			{
				"name": "Output",
				"line": 132,
				"members": [
					{
						"name": "send",
						"line": 133,
						"deco": "FNfxAyaZv",
						"parameters": [
							{
								"name": "output",
								"deco": "xAya"
							}
						],
						"originalType": "@safe void(in string output)",
						"char": 10,
						"kind": "function",
						"storageClass": [
							"abstract"
						]
					},
					{
						"name": "flush",
						"line": 134,
						"deco": "FNfZv",
						"char": 10,
						"kind": "function",
						"storageClass": [
							"abstract"
						]
					}
				],
				"char": 1,
				"kind": "interface"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "write",
						"line": 163,
						"type": "void(Output output, auto ref T args)",
						"parameters": [
							{
								"name": "output",
								"type": "Output"
							},
							{
								"name": "args",
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 166,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "write",
				"line": 163,
				"comment": " Writes the args in a thread-safe manner.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "writeln",
						"line": 171,
						"type": "void(Output output, auto ref T args)",
						"parameters": [
							{
								"name": "output",
								"type": "Output"
							},
							{
								"name": "args",
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 173,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "writeln",
				"line": 171,
				"comment": " Writes the args in a thread-safe manner and appends a newline.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "writelnGreen",
						"line": 179,
						"type": "void(Output output, auto ref T args)",
						"parameters": [
							{
								"name": "output",
								"type": "Output"
							},
							{
								"name": "args",
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 182,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "writelnGreen",
				"line": 179,
				"comment": " Writes the args in a thread-safe manner in green (POSIX only).\n and appends a newline.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "writelnRed",
						"line": 188,
						"type": "void(Output output, auto ref T args)",
						"parameters": [
							{
								"name": "output",
								"type": "Output"
							},
							{
								"name": "args",
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 190,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "writelnRed",
				"line": 188,
				"comment": " Writes the args in a thread-safe manner in red (POSIX only)\n and appends a newline.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "writeRed",
						"line": 196,
						"type": "void(Output output, auto ref T args)",
						"parameters": [
							{
								"name": "output",
								"type": "Output"
							},
							{
								"name": "args",
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 199,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "writeRed",
				"line": 196,
				"comment": " Writes the args in a thread-safe manner in red (POSIX only).\n and appends a newline.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "writeYellow",
						"line": 205,
						"type": "void(Output output, auto ref T args)",
						"parameters": [
							{
								"name": "output",
								"type": "Output"
							},
							{
								"name": "args",
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 208,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "writeYellow",
				"line": 205,
				"comment": " Writes the args in a thread-safe manner in yellow (POSIX only).\n and appends a newline.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"interfaces": [
					"unit_threaded.io.Output"
				],
				"members": [
					{
						"endchar": 5,
						"name": "get",
						"line": 220,
						"comment": " Returns a reference to the only instance of this class.\n",
						"deco": "FNeZC13unit_threaded2io12WriterThread",
						"endline": 230,
						"char": 25,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "send",
						"line": 233,
						"deco": "FNfxAyaZv",
						"parameters": [
							{
								"name": "output",
								"deco": "xAya"
							}
						],
						"endline": 242,
						"originalType": "@safe void(in string output)",
						"char": 19,
						"kind": "function",
						"overrides": [
							"unit_threaded.io.Output.send"
						],
						"storageClass": [
							"override"
						]
					},
					{
						"endchar": 5,
						"name": "flush",
						"line": 244,
						"deco": "FNfZv",
						"endline": 250,
						"char": 19,
						"kind": "function",
						"overrides": [
							"unit_threaded.io.Output.flush"
						],
						"storageClass": [
							"override"
						]
					},
					{
						"endchar": 5,
						"name": "start",
						"line": 255,
						"comment": " Creates the singleton instance and waits until it's ready.\n",
						"deco": "FZv",
						"endline": 262,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "stop",
						"line": 265,
						"deco": "FZv",
						"endline": 282,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "join",
						"line": 287,
						"comment": " Waits for the writer thread to terminate.\n",
						"deco": "FZv",
						"endline": 298,
						"char": 10,
						"kind": "function"
					}
				],
				"name": "WriterThread",
				"line": 213,
				"comment": " Thread to output to stdout\n",
				"char": 1,
				"kind": "class"
			},
			{
				"name": "nullFileName",
				"line": 332,
				"deco": "Aya",
				"init": "\"/dev/null\"",
				"char": 10,
				"kind": "variable",
				"storageClass": [
					"enum"
				]
			},
			{
				"name": "nullFileName",
				"line": 332,
				"deco": "Aya",
				"init": "\"/dev/null\"",
				"char": 10,
				"kind": "variable",
				"storageClass": [
					"enum"
				]
			},
			{
				"name": "FakeFile",
				"line": 437,
				"members": [
					{
						"name": "fileName",
						"line": 438,
						"type": "string",
						"char": 16,
						"kind": "variable"
					},
					{
						"name": "mode",
						"line": 439,
						"type": "string",
						"char": 16,
						"kind": "variable"
					},
					{
						"name": "output",
						"line": 440,
						"type": "string",
						"char": 16,
						"kind": "variable"
					},
					{
						"endchar": 30,
						"name": "flush",
						"line": 441,
						"type": "shared void()",
						"endline": 441,
						"char": 14,
						"kind": "function"
					},
					{
						"endchar": 9,
						"name": "write",
						"line": 442,
						"type": "shared void(in string s)",
						"parameters": [
							{
								"name": "s",
								"type": "string",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 444,
						"char": 14,
						"kind": "function"
					},
					{
						"endchar": 9,
						"name": "lines",
						"line": 445,
						"type": "shared const pure @safe string[]()",
						"endline": 448,
						"char": 18,
						"kind": "function"
					}
				],
				"char": 5,
				"kind": "struct"
			},
			{
				"name": "gOut",
				"line": 450,
				"type": "FakeFile",
				"char": 21,
				"kind": "variable",
				"storageClass": [
					"shared"
				]
			},
			{
				"name": "gErr",
				"line": 451,
				"type": "FakeFile",
				"char": 21,
				"kind": "variable",
				"storageClass": [
					"shared"
				]
			},
			{
				"endchar": 5,
				"name": "resetFakeFiles",
				"line": 452,
				"type": "void()",
				"endline": 457,
				"char": 10,
				"kind": "function"
			}
		],
		"comment": " IO related functions\n",
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/light.d",
		"name": "unit_threaded.light",
		"members": [
			{
				"members": [
					{
						"endchar": 1,
						"name": "runTests",
						"line": 21,
						"type": "int(in string[] args)",
						"parameters": [
							{
								"name": "args",
								"type": "string[]",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 23,
						"char": 5,
						"kind": "function"
					}
				],
				"name": "runTests",
				"line": 21,
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 5,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "runTests",
						"line": 25,
						"type": "int(string[] args, T testData)",
						"parameters": [
							{
								"name": "args",
								"type": "string[]"
							},
							{
								"name": "testData",
								"type": "T"
							}
						],
						"endline": 27,
						"char": 5,
						"kind": "function"
					}
				],
				"name": "runTests",
				"line": 25,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 5,
				"kind": "template"
			},
			{
				"endchar": 1,
				"name": "runTestsImpl",
				"line": 29,
				"deco": "FZi",
				"endline": 48,
				"char": 5,
				"kind": "function"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "allTestData",
						"line": 50,
						"type": "int[]()",
						"endline": 52,
						"char": 7,
						"kind": "function"
					}
				],
				"name": "allTestData",
				"line": 50,
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 7,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "writelnUt",
						"line": 54,
						"type": "void(auto ref T args)",
						"parameters": [
							{
								"name": "args",
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 56,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "writelnUt",
				"line": 54,
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "check",
						"line": 58,
						"type": "@trusted void(int numFuncCalls = 100, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "numFuncCalls",
								"deco": "i",
								"default": "100"
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 62,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "check",
				"line": 58,
				"parameters": [
					{
						"name": "F",
						"kind": "alias"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "checkCustom",
						"line": 64,
						"type": "@trusted void(int numFuncCalls = 100, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "numFuncCalls",
								"deco": "i",
								"default": "100"
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 68,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "checkCustom",
				"line": 64,
				"parameters": [
					{
						"name": "Generator",
						"kind": "alias"
					},
					{
						"name": "Predicate",
						"kind": "alias"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"name": "Output",
				"line": 71,
				"members": [
					{
						"name": "send",
						"line": 72,
						"deco": "FNfxAyaZv",
						"parameters": [
							{
								"name": "output",
								"deco": "xAya"
							}
						],
						"originalType": "@safe void(in string output)",
						"char": 10,
						"kind": "function",
						"storageClass": [
							"abstract"
						]
					},
					{
						"name": "flush",
						"line": 73,
						"deco": "FNfZv",
						"char": 10,
						"kind": "function",
						"storageClass": [
							"abstract"
						]
					}
				],
				"char": 1,
				"kind": "interface"
			},
			{
				"name": "TestCase",
				"line": 76,
				"members": [
					{
						"name": "test",
						"line": 77,
						"deco": "FZv",
						"char": 19,
						"kind": "function",
						"storageClass": [
							"abstract"
						]
					},
					{
						"endchar": 19,
						"name": "setup",
						"line": 78,
						"deco": "FZv",
						"endline": 78,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 22,
						"name": "shutdown",
						"line": 79,
						"deco": "FZv",
						"endline": 79,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 91,
						"name": "currentTest",
						"line": 80,
						"deco": "FZC13unit_threaded5light8TestCase",
						"endline": 80,
						"char": 21,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 119,
						"name": "getWriter",
						"line": 81,
						"deco": "FZC13unit_threaded5light6Output",
						"endline": 81,
						"char": 12,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "class"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "mock",
						"line": 85,
						"type": "()",
						"endline": 88,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "mock",
				"line": 85,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "mockStruct",
						"line": 90,
						"type": "(auto ref T returns)",
						"parameters": [
							{
								"name": "returns",
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 93,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "mockStruct",
				"line": 90,
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeTrue",
						"line": 95,
						"type": "void(lazy E condition, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "condition",
								"type": "E",
								"storageClass": [
									"lazy"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 97,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeTrue",
				"line": 95,
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeFalse",
						"line": 99,
						"type": "void(lazy E condition, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "condition",
								"type": "E",
								"storageClass": [
									"lazy"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 101,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeFalse",
				"line": 99,
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldEqual",
						"line": 103,
						"type": "void(auto ref V value, auto ref E expected, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "V",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "expected",
								"type": "E",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 127,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldEqual",
				"line": 103,
				"parameters": [
					{
						"name": "V",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldNotEqual",
						"line": 129,
						"type": "void(auto ref V value, auto ref E expected, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "V",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "expected",
								"type": "E",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 131,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldNotEqual",
				"line": 129,
				"parameters": [
					{
						"name": "V",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeNull",
						"line": 133,
						"type": "void(auto ref T value, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 135,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeNull",
				"line": 133,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldNotBeNull",
						"line": 137,
						"type": "void(auto ref T value, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 139,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldNotBeNull",
				"line": 137,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "isLikeAssociativeArray",
						"line": 141,
						"init": "is(typeof(()\n{\nif (K.init in T)\n{\n}\nif (!(K.init in T))\n{\n}\n}\n))",
						"char": 6,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "isLikeAssociativeArray",
				"line": 141,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "K",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeIn",
						"line": 149,
						"type": "void(auto ref T value, auto ref U container, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "container",
								"type": "U",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 152,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeIn",
				"line": 149,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "U",
						"kind": "type"
					}
				],
				"constraint": "isLikeAssociativeArray!U",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeIn",
						"line": 154,
						"type": "void(auto ref T value, U container, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "container",
								"type": "U"
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 160,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeIn",
				"line": 154,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "U",
						"kind": "type"
					}
				],
				"constraint": "!isLikeAssociativeArray!(U, T)",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldNotBeIn",
						"line": 162,
						"type": "void(auto ref T value, auto ref U container, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "container",
								"type": "U",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 165,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldNotBeIn",
				"line": 162,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "U",
						"kind": "type"
					}
				],
				"constraint": "isLikeAssociativeArray!U",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldNotBeIn",
						"line": 167,
						"type": "void(auto ref T value, U container, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "container",
								"type": "U"
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 173,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldNotBeIn",
				"line": 167,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "U",
						"kind": "type"
					}
				],
				"constraint": "!isLikeAssociativeArray!(U, T)",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldThrow",
						"line": 175,
						"type": "void(lazy E expr, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "expr",
								"type": "E",
								"storageClass": [
									"lazy"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 185,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldThrow",
				"line": 175,
				"parameters": [
					{
						"name": "T",
						"deco": "C6object9Throwable",
						"default": "Exception",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldThrowExactly",
						"line": 187,
						"type": "void(lazy E expr, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "expr",
								"type": "E",
								"storageClass": [
									"lazy"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 200,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldThrowExactly",
				"line": 187,
				"parameters": [
					{
						"name": "T",
						"deco": "C6object9Throwable",
						"default": "Exception",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldNotThrow",
						"line": 202,
						"type": "void(lazy E expr, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "expr",
								"type": "E",
								"storageClass": [
									"lazy"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 210,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldNotThrow",
				"line": 202,
				"parameters": [
					{
						"name": "T",
						"deco": "C6object9Throwable",
						"default": "Exception",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldThrowWithMessage",
						"line": 212,
						"type": "void(lazy E expr, string msg, string file = __FILE__, size_t line = __LINE__)",
						"parameters": [
							{
								"name": "expr",
								"type": "E",
								"storageClass": [
									"lazy"
								]
							},
							{
								"name": "msg",
								"type": "string"
							},
							{
								"name": "file",
								"type": "string",
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"default": "__LINE__"
							}
						],
						"endline": 224,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldThrowWithMessage",
				"line": 212,
				"parameters": [
					{
						"name": "T",
						"deco": "C6object9Throwable",
						"default": "Exception",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldApproxEqual",
						"line": 226,
						"type": "void(in V value, in E expected, string file = __FILE__, size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "V",
								"storageClass": [
									"in"
								]
							},
							{
								"name": "expected",
								"type": "E",
								"storageClass": [
									"in"
								]
							},
							{
								"name": "file",
								"type": "string",
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"default": "__LINE__"
							}
						],
						"endline": 229,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldApproxEqual",
				"line": 226,
				"parameters": [
					{
						"name": "V",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeEmpty",
						"line": 231,
						"type": "void(auto ref R rng, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "rng",
								"type": "R",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 242,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeEmpty",
				"line": 231,
				"parameters": [
					{
						"name": "R",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldNotBeEmpty",
						"line": 244,
						"type": "void(auto ref R rng, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "rng",
								"type": "R",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 255,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldNotBeEmpty",
				"line": 244,
				"parameters": [
					{
						"name": "R",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeGreaterThan",
						"line": 257,
						"type": "void(auto ref T t, auto ref U u, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "t",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "u",
								"type": "U",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 261,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeGreaterThan",
				"line": 257,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "U",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeSmallerThan",
						"line": 263,
						"type": "void(auto ref T t, auto ref U u, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "t",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "u",
								"type": "U",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 267,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeSmallerThan",
				"line": 263,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "U",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeSameSetAs",
						"line": 269,
						"type": "void(auto ref V value, auto ref E expected, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "V",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "expected",
								"type": "E",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 271,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeSameSetAs",
				"line": 269,
				"parameters": [
					{
						"name": "V",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldNotBeSameSetAs",
						"line": 273,
						"type": "void(auto ref V value, auto ref E expected, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "V",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "expected",
								"type": "E",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 275,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldNotBeSameSetAs",
				"line": 273,
				"parameters": [
					{
						"name": "V",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"endchar": 1,
				"name": "shouldBeSameJsonAs",
				"line": 294,
				"deco": "FNexAyaxQexQhxmZv",
				"parameters": [
					{
						"name": "actual",
						"deco": "xAya"
					},
					{
						"name": "expected",
						"deco": "xAya"
					},
					{
						"name": "file",
						"deco": "xAya",
						"default": "__FILE__"
					},
					{
						"name": "line",
						"deco": "xm",
						"default": "cast(const(ulong))__LINE__"
					}
				],
				"endline": 312,
				"originalType": "@trusted void(in string actual, in string expected, in string file = __FILE__, in size_t line = __LINE__)",
				"char": 6,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "fail",
				"line": 324,
				"deco": "FNaNfxAyaxQexmZv",
				"parameters": [
					{
						"name": "output",
						"deco": "xAya"
					},
					{
						"name": "file",
						"deco": "xAya"
					},
					{
						"name": "line",
						"deco": "xm"
					}
				],
				"endline": 326,
				"originalType": "pure @safe void(in string output, in string file, in size_t line)",
				"char": 6,
				"kind": "function"
			}
		],
		"comment": "   This module is an attempt to alleviate compile times by including the bare\n   minimum. The idea is that while the reporting usually done by unit-threaded\n   is welcome, it only really matters when tests fail. Otherwise, no news is\n   good news.\n\n   Likewise, naming and selecting tests are features used when certain tests\n   fail. The usual way to run tests is to run all of them and be happy if\n   they all pass.\n\n   This module makes it so that unit-threaded gets out of the way, and if\n   needed the full features can be turned on at the cost of compiling\n   much more slowly.\n\n   There aren't even any template constraints on the `should` functions\n   to avoid imports as much as possible.\n",
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/meta.d",
		"name": "unit_threaded.meta",
		"members": [
			{
				"members": [
					{
						"endchar": 1,
						"name": "importMember",
						"line": 5,
						"type": "string(string moduleMember)",
						"parameters": [
							{
								"name": "moduleMember",
								"type": "string"
							}
						],
						"endline": 8,
						"char": 8,
						"kind": "function"
					}
				],
				"name": "importMember",
				"line": 5,
				"parameters": [
					{
						"name": "module_",
						"kind": "alias"
					}
				],
				"char": 8,
				"kind": "template"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/mock.d",
		"name": "unit_threaded.mock",
		"members": [
			{
				"members": [
					{
						"name": "Identity",
						"line": 5,
						"type": "T",
						"char": 1,
						"kind": "alias"
					}
				],
				"name": "Identity",
				"line": 5,
				"parameters": [
					{
						"name": "T",
						"kind": "alias"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "implMixinStr",
						"line": 9,
						"type": "string()",
						"endline": 86,
						"char": 8,
						"kind": "function"
					}
				],
				"name": "implMixinStr",
				"line": 9,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 8,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "_verified",
						"line": 142,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"name": "expectedFuncs",
						"line": 143,
						"type": "string[]",
						"char": 14,
						"kind": "variable"
					},
					{
						"name": "calledFuncs",
						"line": 144,
						"type": "string[]",
						"char": 14,
						"kind": "variable"
					},
					{
						"name": "expectedValues",
						"line": 145,
						"type": "string[]",
						"char": 14,
						"kind": "variable"
					},
					{
						"name": "calledValues",
						"line": 146,
						"type": "string[]",
						"char": 14,
						"kind": "variable"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "expect",
								"line": 148,
								"type": "void(auto ref V values)",
								"parameters": [
									{
										"name": "values",
										"type": "V",
										"storageClass": [
											"auto",
											"ref"
										]
									}
								],
								"endline": 157,
								"char": 10,
								"kind": "function"
							}
						],
						"name": "expect",
						"line": 148,
						"parameters": [
							{
								"name": "funcName",
								"type": "string",
								"kind": "value"
							},
							{
								"name": "V",
								"kind": "tuple"
							}
						],
						"char": 10,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "expectCalled",
								"line": 159,
								"type": "void(auto ref V values)",
								"parameters": [
									{
										"name": "values",
										"type": "V",
										"storageClass": [
											"auto",
											"ref"
										]
									}
								],
								"endline": 163,
								"char": 10,
								"kind": "function"
							}
						],
						"name": "expectCalled",
						"line": 159,
						"parameters": [
							{
								"name": "func",
								"type": "string",
								"kind": "value"
							},
							{
								"name": "file",
								"type": "string",
								"defaultValue": "__FILE__",
								"kind": "value"
							},
							{
								"name": "line",
								"type": "size_t",
								"defaultValue": "__LINE__",
								"kind": "value"
							},
							{
								"name": "V",
								"kind": "tuple"
							}
						],
						"char": 10,
						"kind": "template"
					},
					{
						"endchar": 5,
						"name": "verify",
						"line": 165,
						"type": "pure @safe void(string file = __FILE__, size_t line = __LINE__)",
						"parameters": [
							{
								"name": "file",
								"type": "string",
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"default": "__LINE__"
							}
						],
						"endline": 191,
						"char": 10,
						"kind": "function"
					}
				],
				"name": "MockImplCommon",
				"line": 141,
				"parameters": [],
				"char": 7,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "Mock",
						"line": 196,
						"members": [
							{
								"name": "_impl",
								"line": 198,
								"type": "MockAbstract",
								"char": 18,
								"kind": "variable"
							},
							{
								"name": "MockAbstract",
								"line": 201,
								"members": [
									{
										"name": "MockImplCommon!()",
										"line": 208,
										"char": 9,
										"kind": "mixin"
									}
								],
								"char": 5,
								"kind": "class"
							},
							{
								"endchar": 5,
								"name": "this",
								"line": 211,
								"type": "(int)",
								"parameters": [
									{
										"deco": "i"
									}
								],
								"endline": 213,
								"char": 5,
								"kind": "constructor"
							},
							{
								"endchar": 5,
								"name": "~this",
								"line": 215,
								"endline": 217,
								"char": 5,
								"kind": "destructor",
								"storageClass": [
									"pure",
									"@safe"
								]
							},
							{
								"members": [
									{
										"endchar": 5,
										"name": "returnValue",
										"line": 219,
										"type": "void(V values)",
										"parameters": [
											{
												"name": "values",
												"type": "V"
											}
										],
										"endline": 222,
										"char": 10,
										"kind": "function"
									}
								],
								"name": "returnValue",
								"line": 219,
								"parameters": [
									{
										"name": "funcName",
										"type": "string",
										"kind": "value"
									},
									{
										"name": "V",
										"kind": "tuple"
									}
								],
								"char": 10,
								"kind": "template"
							},
							{
								"members": [
									{
										"endchar": 5,
										"name": "returnValue",
										"line": 234,
										"type": "void(V values)",
										"parameters": [
											{
												"name": "values",
												"type": "V"
											}
										],
										"endline": 240,
										"char": 10,
										"kind": "function"
									}
								],
								"name": "returnValue",
								"line": 234,
								"comment": "       This version takes overloads into account. i is the overload\n       index. e.g.:\n       ---------\n       interface Interface { void foo(int); void foo(string); }\n       auto m = mock!Interface;\n       m.returnValue!(0, \"foo\"); // int overload\n       m.returnValue!(1, \"foo\"); // string overload\n       ---------\n",
								"parameters": [
									{
										"name": "i",
										"deco": "i",
										"kind": "value"
									},
									{
										"name": "funcName",
										"type": "string",
										"kind": "value"
									},
									{
										"name": "V",
										"kind": "tuple"
									}
								],
								"char": 10,
								"kind": "template"
							},
							{
								"members": [
									{
										"endchar": 5,
										"name": "assertFunctionIsVirtual",
										"line": 242,
										"type": "void()",
										"endline": 247,
										"char": 25,
										"kind": "function"
									}
								],
								"name": "assertFunctionIsVirtual",
								"line": 242,
								"parameters": [
									{
										"name": "funcName",
										"type": "string",
										"kind": "value"
									}
								],
								"char": 25,
								"kind": "template"
							}
						],
						"char": 1,
						"kind": "struct"
					}
				],
				"name": "Mock",
				"line": 196,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "mock",
						"line": 260,
						"type": "()",
						"endline": 262,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "mock",
				"line": 260,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"name": "Class",
				"line": 335,
				"members": [
					{
						"name": "foo",
						"line": 336,
						"type": "pure @safe int(int, string)",
						"parameters": [
							{
								"deco": "i"
							},
							{
								"type": "string"
							}
						],
						"char": 18,
						"kind": "function",
						"storageClass": [
							"abstract"
						]
					},
					{
						"endchar": 72,
						"name": "timesTwo",
						"line": 337,
						"type": "const pure nothrow @safe int(int i)",
						"parameters": [
							{
								"name": "i",
								"deco": "i"
							}
						],
						"endline": 337,
						"char": 15,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 68,
						"name": "timesThree",
						"line": 338,
						"type": "const pure nothrow @safe int(int i)",
						"parameters": [
							{
								"name": "i",
								"deco": "i"
							}
						],
						"endline": 338,
						"char": 9,
						"kind": "function"
					},
					{
						"endchar": 69,
						"name": "timesThreeMutable",
						"line": 339,
						"type": "pure nothrow @safe int(int i)",
						"parameters": [
							{
								"name": "i",
								"deco": "i"
							}
						],
						"endline": 339,
						"char": 9,
						"kind": "function"
					}
				],
				"char": 9,
				"kind": "class"
			},
			{
				"members": [
					{
						"name": "ReturnValues",
						"line": 429,
						"members": [
							{
								"name": "funcName",
								"line": 430,
								"type": "function_",
								"char": 5,
								"kind": "alias"
							},
							{
								"name": "Values",
								"line": 431,
								"type": "T",
								"char": 5,
								"kind": "alias"
							},
							{
								"endchar": 5,
								"name": "values",
								"line": 433,
								"type": "()",
								"endline": 439,
								"char": 17,
								"kind": "function",
								"storageClass": [
									"auto",
									"static"
								]
							}
						],
						"char": 1,
						"kind": "struct"
					}
				],
				"name": "ReturnValues",
				"line": 429,
				"parameters": [
					{
						"name": "function_",
						"deco": "Aya",
						"kind": "value"
					},
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"constraint": "from!\"std.meta\".allSatisfy!(isValue, T)",
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "isReturnValue",
						"line": 442,
						"init": "is(T : ReturnValues!U, U...)",
						"char": 6,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "isReturnValue",
				"line": 442,
				"parameters": [
					{
						"name": "T",
						"kind": "alias"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "isValue",
						"line": 443,
						"init": "is(typeof(T))",
						"char": 6,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "isValue",
				"line": 443,
				"parameters": [
					{
						"name": "T",
						"kind": "alias"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "mockStruct",
						"line": 452,
						"type": "(auto ref T returns)",
						"parameters": [
							{
								"name": "returns",
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 495,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "mockStruct",
				"line": 452,
				"comment": "   Version of mockStruct that accepts 0 or more values of the same\n   type. Whatever function is called on it, these values will\n   be returned one by one. The limitation is that if more than one\n   function is called on the mock, they all return the same type\n",
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "mockStruct",
						"line": 503,
						"type": "()",
						"endline": 538,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "mockStruct",
				"line": 503,
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"constraint": "T.length > 0 && from!\"std.meta\".allSatisfy!(isReturnValue, T)",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "throwStruct",
						"line": 682,
						"type": "()",
						"endline": 693,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "throwStruct",
				"line": 682,
				"parameters": [
					{
						"name": "E",
						"default": "from!\"unit_threaded.should\".UnitTestException",
						"kind": "type"
					},
					{
						"defaultDeco": "v",
						"name": "R",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"name": "FooException",
				"line": 704,
				"members": [
					{
						"name": "basicExceptionCtors!()",
						"line": 706,
						"char": 9,
						"kind": "mixin"
					}
				],
				"char": 5,
				"kind": "class"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/options.d",
		"name": "unit_threaded.options",
		"members": [
			{
				"name": "Options",
				"line": 4,
				"members": [
					{
						"offset": 0,
						"name": "multiThreaded",
						"line": 5,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 8,
						"name": "testsToRun",
						"line": 6,
						"deco": "AAya",
						"char": 14,
						"kind": "variable"
					},
					{
						"offset": 24,
						"name": "debugOutput",
						"line": 7,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 25,
						"name": "list",
						"line": 8,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 26,
						"name": "exit",
						"line": 9,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 27,
						"name": "forceEscCodes",
						"line": 10,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 28,
						"name": "random",
						"line": 11,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 32,
						"name": "seed",
						"line": 12,
						"deco": "k",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 36,
						"name": "stackTraces",
						"line": 13,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 37,
						"name": "showChrono",
						"line": 14,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"endchar": 1,
				"name": "getOptions",
				"line": 20,
				"comment": " Parses the command-line args and returns Options\n",
				"deco": "FAAyaZS13unit_threaded7options7Options",
				"parameters": [
					{
						"name": "args",
						"deco": "AAya"
					}
				],
				"endline": 74,
				"originalType": "(string[] args)",
				"char": 6,
				"kind": "function",
				"storageClass": [
					"auto"
				]
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/package.d",
		"name": "unit_threaded",
		"members": [
			{
				"name": "unit_threaded.should",
				"line": 7,
				"char": 19,
				"kind": "import"
			},
			{
				"name": "unit_threaded.testcase",
				"line": 8,
				"char": 19,
				"kind": "import"
			},
			{
				"name": "unit_threaded.io",
				"line": 9,
				"char": 19,
				"kind": "import"
			},
			{
				"name": "unit_threaded.reflection",
				"line": 10,
				"char": 19,
				"kind": "import"
			},
			{
				"name": "unit_threaded.runner",
				"line": 11,
				"char": 19,
				"kind": "import"
			},
			{
				"name": "unit_threaded.integration",
				"line": 12,
				"char": 19,
				"kind": "import"
			},
			{
				"name": "unit_threaded.property",
				"line": 13,
				"char": 19,
				"kind": "import"
			},
			{
				"name": "unit_threaded.mock",
				"line": 14,
				"char": 19,
				"kind": "import"
			},
			{
				"name": "unit_threaded.attrs",
				"line": 15,
				"char": 19,
				"kind": "import"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/property.d",
		"name": "unit_threaded.property",
		"members": [
			{
				"members": [],
				"name": "from",
				"line": 7,
				"parameters": [
					{
						"name": "moduleName",
						"deco": "Aya",
						"kind": "value"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"name": "gRandom",
				"line": 12,
				"deco": "S3std6random__T21MersenneTwisterEngineTkVmi32Vmi624Vmi397Vmi31Vki2567483615Vmi11Vki4294967295Vmi7Vki2636928640Vmi15Vki4022730752Vmi18Vki1812433253ZQFc",
				"originalType": "Random",
				"char": 8,
				"kind": "variable"
			},
			{
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 23,
						"deco": "FNaNbNfxAyaAyamC6object9ThrowableZC13unit_threaded8property17PropertyException",
						"parameters": [
							{
								"name": "msg",
								"deco": "xAya"
							},
							{
								"name": "file",
								"deco": "Aya",
								"default": "__FILE__"
							},
							{
								"name": "line",
								"deco": "m",
								"default": "cast(ulong)__LINE__"
							},
							{
								"name": "next",
								"deco": "C6object9Throwable",
								"default": "null"
							}
						],
						"endline": 27,
						"originalType": "pure nothrow @safe (in string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 5,
						"kind": "constructor"
					}
				],
				"name": "PropertyException",
				"line": 21,
				"base": "object.Exception",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "check",
						"line": 30,
						"type": "@trusted void(int numFuncCalls = 100, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "numFuncCalls",
								"deco": "i",
								"default": "100"
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 74,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "check",
				"line": 30,
				"parameters": [
					{
						"name": "F",
						"kind": "alias"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "checkCustom",
						"line": 76,
						"type": "@trusted void(int numFuncCalls = 100, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "numFuncCalls",
								"deco": "i",
								"default": "100"
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 110,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "checkCustom",
				"line": 76,
				"parameters": [
					{
						"name": "Generator",
						"kind": "alias"
					},
					{
						"name": "Predicate",
						"kind": "alias"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shrink",
						"line": 177,
						"type": "T(T value)",
						"parameters": [
							{
								"name": "value",
								"type": "T"
							}
						],
						"endline": 182,
						"char": 3,
						"kind": "function"
					}
				],
				"name": "shrink",
				"line": 177,
				"parameters": [
					{
						"name": "F",
						"kind": "alias"
					},
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 3,
				"kind": "template"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/randomized/benchmark.d",
		"name": "unit_threaded.randomized.benchmark",
		"members": [
			{
				"name": "BenchmarkOptions",
				"line": 78,
				"comment": " The options  controlling the behaviour of benchmark.\n",
				"members": [
					{
						"offset": 0,
						"name": "funcname",
						"line": 82,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 16,
						"name": "filename",
						"line": 83,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 32,
						"name": "duration",
						"line": 84,
						"deco": "S4core4time8Duration",
						"init": "Duration(10000000L)",
						"char": 14,
						"kind": "variable"
					},
					{
						"offset": 40,
						"name": "maxRounds",
						"line": 86,
						"deco": "m",
						"originalType": "size_t",
						"init": "10000LU",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 48,
						"name": "seed",
						"line": 88,
						"deco": "i",
						"init": "1337",
						"char": 9,
						"kind": "variable"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 90,
						"deco": "FNcAyaZS13unit_threaded10randomized9benchmark16BenchmarkOptions",
						"parameters": [
							{
								"name": "funcname",
								"deco": "Aya"
							}
						],
						"endline": 93,
						"originalType": "ref (string funcname)",
						"char": 5,
						"kind": "constructor"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"name": "Benchmark",
				"line": 99,
				"comment": " This $(D struct) takes care of the time taking and outputting of the\nstatistics.\n",
				"members": [
					{
						"offset": 0,
						"name": "filename",
						"line": 104,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 16,
						"name": "funcname",
						"line": 105,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 32,
						"name": "rounds",
						"line": 106,
						"deco": "m",
						"originalType": "size_t",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 40,
						"name": "timeScale",
						"line": 108,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 64,
						"name": "medianStopWatch",
						"line": 109,
						"deco": "e",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 80,
						"name": "dontWrite",
						"line": 110,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 88,
						"name": "ticks",
						"line": 112,
						"deco": "S3std5array__T8AppenderTAS4core4time8DurationZQBg",
						"char": 27,
						"kind": "variable"
					},
					{
						"offset": 96,
						"name": "ticksIndex",
						"line": 113,
						"deco": "m",
						"originalType": "size_t",
						"init": "0LU",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 104,
						"name": "curRound",
						"line": 114,
						"deco": "m",
						"originalType": "size_t",
						"init": "0LU",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 112,
						"name": "startTime",
						"line": 115,
						"deco": "S4core4time__T12MonoTimeImplVEQBdQBb9ClockTypei3ZQBj",
						"originalType": "MonoTimeImpl!(ClockType.precise)",
						"char": 38,
						"kind": "variable"
					},
					{
						"offset": 120,
						"name": "timeSpend",
						"line": 116,
						"deco": "S4core4time8Duration",
						"char": 14,
						"kind": "variable"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 126,
						"comment": " The constructor for the $(D Benchmark).\n    Params:\n        funcname = The name of the $(D benchmark) instance. The $(D funcname)\n            will be used to associate the results with the function\n        founds = How many rounds.\n        filename = The $(D filename) will be used as a filename to store the\n            results.\n",
						"deco": "FNcxAyaxmxQgZS13unit_threaded10randomized9benchmark9Benchmark",
						"parameters": [
							{
								"name": "funcname",
								"deco": "xAya"
							},
							{
								"name": "rounds",
								"deco": "xm"
							},
							{
								"name": "filename",
								"deco": "xAya"
							}
						],
						"endline": 135,
						"originalType": "ref (in string funcname, in size_t rounds, in string filename)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "start",
						"line": 138,
						"comment": " A call to this method will start the time taking process\n",
						"deco": "FZv",
						"endline": 141,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "stop",
						"line": 146,
						"comment": " A call to this method will stop the time taking process, and\n    appends the execution time to the $(D ticks) member.\n",
						"deco": "FZv",
						"endline": 153,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "~this",
						"line": 155,
						"deco": "FZv",
						"endline": 196,
						"char": 5,
						"kind": "destructor"
					},
					{
						"name": "opAssign",
						"line": 99,
						"deco": "FNcNjS13unit_threaded10randomized9benchmark9BenchmarkZQBx",
						"parameters": [
							{
								"name": "p",
								"deco": "S13unit_threaded10randomized9benchmark9Benchmark"
							}
						],
						"originalType": "ref return Benchmark(Benchmark p)",
						"char": 1,
						"kind": "generated function"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "doNotOptimizeAway",
						"line": 199,
						"type": "void(ref T t)",
						"parameters": [
							{
								"name": "t",
								"type": "T",
								"storageClass": [
									"ref"
								]
							}
						],
						"endline": 205,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "doNotOptimizeAway",
				"line": 199,
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "benchmark",
						"line": 251,
						"type": "void(ref const BenchmarkOptions opts)",
						"parameters": [
							{
								"name": "opts",
								"type": "BenchmarkOptions",
								"storageClass": [
									"const",
									"ref"
								]
							}
						],
						"endline": 285,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "benchmark",
				"line": 251,
				"comment": " This function runs the passed callable $(D T) for the duration of\n$(D maxRuntime). It will count how often $(D T) is run in the duration and\nhow long each run took to complete.\n\nUnless compiled in release mode, statistics will be printed to $(D stderr).\nIf compiled in release mode the statistics are appended to a file called\n$(D name).\n\nParams:\n    opts = A $(D BenchmarkOptions) instance that encompasses all possible\n        parameters of benchmark.\n    name = The name of the benchmark. The name is also used as filename to\n        save the benchmark results.\n    maxRuntime = The maximum time the benchmark is executed. The last run will\n        not be interrupted.\n    rndSeed = The seed to the random number generator used to populate the\n        parameter passed to the function to benchmark.\n    rounds = The maximum number of times the callable $(D T) is called.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "alias"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "benchmark",
						"line": 288,
						"type": "void(string funcname = \"\", string filename = __FILE__)",
						"parameters": [
							{
								"name": "funcname",
								"type": "string",
								"default": "\"\""
							},
							{
								"name": "filename",
								"type": "string",
								"default": "__FILE__"
							}
						],
						"endline": 298,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "benchmark",
				"line": 288,
				"comment": "Ditto\n",
				"parameters": [
					{
						"name": "T",
						"kind": "alias"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "benchmark",
						"line": 301,
						"type": "void(from!\"std.datetime\".Duration maxRuntime, string filename = __FILE__)",
						"parameters": [
							{
								"name": "maxRuntime",
								"type": "from!\"std.datetime\".Duration"
							},
							{
								"name": "filename",
								"type": "string",
								"default": "__FILE__"
							}
						],
						"endline": 308,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "benchmark",
				"line": 301,
				"comment": "Ditto\n",
				"parameters": [
					{
						"name": "T",
						"kind": "alias"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "benchmark",
						"line": 319,
						"type": "void(string name, from!\"std.datetime\".Duration maxRuntime, string filename = __FILE__)",
						"parameters": [
							{
								"name": "name",
								"type": "string"
							},
							{
								"name": "maxRuntime",
								"type": "from!\"std.datetime\".Duration"
							},
							{
								"name": "filename",
								"type": "string",
								"default": "__FILE__"
							}
						],
						"endline": 326,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "benchmark",
				"line": 319,
				"comment": "Ditto\n\nDitto\n",
				"parameters": [
					{
						"name": "T",
						"kind": "alias"
					}
				],
				"char": 6,
				"kind": "template"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/randomized/gen.d",
		"name": "unit_threaded.randomized.gen",
		"members": [
			{
				"members": [],
				"name": "from",
				"line": 3,
				"parameters": [
					{
						"name": "moduleName",
						"deco": "Aya",
						"kind": "value"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "isGen",
						"line": 21,
						"init": "true",
						"char": 14,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "isGen",
				"line": 18,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "Value",
						"line": 62,
						"type": "T",
						"char": 5,
						"kind": "alias"
					},
					{
						"name": "value",
						"line": 64,
						"type": "T",
						"char": 7,
						"kind": "variable"
					},
					{
						"endchar": 5,
						"name": "gen",
						"line": 66,
						"type": "T(ref Random gen)",
						"parameters": [
							{
								"name": "gen",
								"type": "Random",
								"storageClass": [
									"ref"
								]
							}
						],
						"endline": 77,
						"char": 7,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "opCall",
						"line": 79,
						"type": "ref T()",
						"endline": 82,
						"char": 11,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "toString",
						"line": 84,
						"type": "@trusted void(scope void delegate(const(char)[]) sink)",
						"parameters": [
							{
								"name": "sink",
								"type": "void delegate(const(char)[])",
								"storageClass": [
									"scope"
								]
							}
						],
						"endline": 105,
						"char": 10,
						"kind": "function"
					},
					{
						"name": "_index",
						"line": 110,
						"deco": "i",
						"char": 17,
						"kind": "variable"
					}
				],
				"name": "GenNumeric",
				"line": 54,
				"comment": " A $(D Gen) type that generates numeric values between the values of the\ntemplate parameter $(D low) and $(D high).\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "low",
						"type": "T",
						"kind": "value"
					},
					{
						"name": "high",
						"type": "T",
						"kind": "value"
					}
				],
				"char": 7,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "Gen",
						"line": 116,
						"members": [
							{
								"endchar": 5,
								"name": "frontLoaded",
								"line": 118,
								"type": "pure nothrow @safe T[]()",
								"endline": 123,
								"char": 24,
								"kind": "function",
								"storageClass": [
									"static"
								]
							},
							{
								"name": "GenNumeric!(T, low, high)",
								"line": 125,
								"char": 5,
								"kind": "mixin"
							}
						],
						"char": 1,
						"kind": "struct"
					}
				],
				"name": "Gen",
				"line": 116,
				"comment": " A $(D Gen) type that generates numeric values between the values of the\ntemplate parameter $(D low) and $(D high).\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "low",
						"type": "T",
						"defaultValue": "minimum!T",
						"kind": "value"
					},
					{
						"name": "high",
						"type": "T",
						"defaultValue": "maximum!T",
						"kind": "value"
					}
				],
				"constraint": "from!\"std.traits\".isIntegral!T",
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "Gen",
						"line": 128,
						"members": [
							{
								"endchar": 5,
								"name": "frontLoaded",
								"line": 129,
								"type": "pure nothrow @safe T[]()",
								"endline": 134,
								"char": 25,
								"kind": "function",
								"storageClass": [
									"static"
								]
							},
							{
								"name": "GenNumeric!(T, low, high)",
								"line": 136,
								"char": 5,
								"kind": "mixin"
							}
						],
						"char": 1,
						"kind": "struct"
					}
				],
				"name": "Gen",
				"line": 128,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "low",
						"type": "T",
						"defaultValue": "0",
						"kind": "value"
					},
					{
						"name": "high",
						"type": "T",
						"defaultValue": "6.022e+23",
						"kind": "value"
					}
				],
				"constraint": "from!\"std.traits\".isFloatingPoint!T",
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "Gen",
						"line": 188,
						"members": [
							{
								"name": "charSet",
								"line": 192,
								"type": "T",
								"char": 24,
								"kind": "variable",
								"storageClass": [
									"static",
									"immutable"
								]
							},
							{
								"name": "numCharsInCharSet",
								"line": 193,
								"type": "size_t",
								"char": 29,
								"kind": "variable",
								"storageClass": [
									"static",
									"immutable"
								]
							},
							{
								"name": "Value",
								"line": 194,
								"type": "T",
								"char": 5,
								"kind": "alias"
							},
							{
								"name": "value",
								"line": 196,
								"type": "T",
								"char": 7,
								"kind": "variable"
							},
							{
								"endchar": 5,
								"name": "gen",
								"line": 214,
								"type": "T(ref Random gen)",
								"parameters": [
									{
										"name": "gen",
										"type": "Random",
										"storageClass": [
											"ref"
										]
									}
								],
								"endline": 237,
								"char": 7,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "opCall",
								"line": 239,
								"type": "ref T()",
								"endline": 242,
								"char": 11,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "toString",
								"line": 244,
								"type": "void(scope void delegate(const(char)[]) sink)",
								"parameters": [
									{
										"name": "sink",
										"type": "void delegate(const(char)[])",
										"storageClass": [
											"scope"
										]
									}
								],
								"endline": 257,
								"char": 10,
								"kind": "function"
							},
							{
								"name": "_index",
								"line": 263,
								"deco": "i",
								"char": 9,
								"kind": "variable"
							},
							{
								"endchar": 5,
								"name": "frontLoaded",
								"line": 265,
								"type": "const pure nothrow @safe T[]()",
								"endline": 270,
								"char": 9,
								"kind": "function"
							}
						],
						"char": 1,
						"kind": "struct"
					}
				],
				"name": "Gen",
				"line": 188,
				"comment": " A $(D Gen) type that generates unicode strings with a number of\ncharatacters that is between template parameter $(D low) and $(D high).\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "low",
						"defaultValue": "0",
						"deco": "m",
						"kind": "value"
					},
					{
						"name": "high",
						"defaultValue": "32",
						"deco": "m",
						"kind": "value"
					}
				],
				"constraint": "from!\"std.traits\".isSomeString!T",
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "GenASCIIString",
						"line": 295,
						"members": [
							{
								"name": "charSet",
								"line": 299,
								"type": "string",
								"char": 19,
								"kind": "variable",
								"storageClass": [
									"static"
								]
							},
							{
								"name": "numCharsInCharSet",
								"line": 300,
								"type": "size_t",
								"char": 29,
								"kind": "variable",
								"storageClass": [
									"static",
									"immutable"
								]
							},
							{
								"name": "value",
								"line": 302,
								"type": "string",
								"char": 12,
								"kind": "variable"
							},
							{
								"endchar": 5,
								"name": "gen",
								"line": 320,
								"type": "string(ref Random gen)",
								"parameters": [
									{
										"name": "gen",
										"type": "Random",
										"storageClass": [
											"ref"
										]
									}
								],
								"endline": 342,
								"char": 12,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "opCall",
								"line": 344,
								"type": "ref string()",
								"endline": 347,
								"char": 16,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "toString",
								"line": 349,
								"type": "void(scope void delegate(const(char)[]) sink)",
								"parameters": [
									{
										"name": "sink",
										"type": "void delegate(const(char)[])",
										"storageClass": [
											"scope"
										]
									}
								],
								"endline": 362,
								"char": 10,
								"kind": "function"
							},
							{
								"name": "_index",
								"line": 368,
								"deco": "i",
								"char": 9,
								"kind": "variable"
							},
							{
								"endchar": 5,
								"name": "frontLoaded",
								"line": 370,
								"type": "const pure nothrow @safe string[]()",
								"endline": 372,
								"char": 14,
								"kind": "function"
							}
						],
						"char": 1,
						"kind": "struct"
					}
				],
				"name": "GenASCIIString",
				"line": 295,
				"comment": "DITTO This random $(D string)s only consisting of ASCII character\n",
				"parameters": [
					{
						"name": "low",
						"defaultValue": "1",
						"deco": "m",
						"kind": "value"
					},
					{
						"name": "high",
						"defaultValue": "32",
						"deco": "m",
						"kind": "value"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "Gen",
						"line": 390,
						"members": [
							{
								"name": "Value",
								"line": 398,
								"type": "T",
								"char": 5,
								"kind": "alias"
							},
							{
								"name": "E",
								"line": 399,
								"type": "Unqual!(ElementType!T)",
								"char": 5,
								"kind": "alias"
							},
							{
								"name": "value",
								"line": 401,
								"type": "T",
								"char": 7,
								"kind": "variable"
							},
							{
								"name": "elementGen",
								"line": 402,
								"type": "Gen!E",
								"char": 11,
								"kind": "variable"
							},
							{
								"endchar": 5,
								"name": "gen",
								"line": 404,
								"type": "T(ref Random rnd)",
								"parameters": [
									{
										"name": "rnd",
										"type": "Random",
										"storageClass": [
											"ref"
										]
									}
								],
								"endline": 409,
								"char": 7,
								"kind": "function"
							},
							{
								"name": "_index",
								"line": 415,
								"type": "size_t",
								"char": 12,
								"kind": "variable"
							},
							{
								"endchar": 5,
								"name": "frontLoaded",
								"line": 417,
								"type": "nothrow @safe T[]()",
								"endline": 420,
								"char": 9,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "genArray",
								"line": 422,
								"type": "T(ref Random rnd)",
								"parameters": [
									{
										"name": "rnd",
										"type": "Random",
										"storageClass": [
											"ref"
										]
									}
								],
								"endline": 434,
								"char": 7,
								"kind": "function"
							}
						],
						"char": 1,
						"kind": "struct"
					}
				],
				"name": "Gen",
				"line": 390,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "low",
						"defaultValue": "1",
						"deco": "m",
						"kind": "value"
					},
					{
						"name": "high",
						"defaultValue": "1024",
						"deco": "m",
						"kind": "value"
					}
				],
				"constraint": "from!\"std.range.primitives\".isInputRange!T && !from!\"std.traits\".isSomeString!T",
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "Gen",
						"line": 513,
						"members": [
							{
								"name": "value",
								"line": 516,
								"deco": "b",
								"char": 10,
								"kind": "variable"
							},
							{
								"endchar": 5,
								"name": "gen",
								"line": 519,
								"type": "@safe bool(ref Random rnd)",
								"parameters": [
									{
										"name": "rnd",
										"type": "Random",
										"storageClass": [
											"ref"
										]
									}
								],
								"endline": 523,
								"char": 10,
								"kind": "function"
							}
						],
						"char": 1,
						"kind": "struct"
					}
				],
				"name": "Gen",
				"line": 513,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == bool)",
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "Gen",
						"line": 541,
						"members": [
							{
								"endchar": 70,
								"name": "frontLoaded",
								"line": 543,
								"type": "pure nothrow @safe T[]()",
								"endline": 543,
								"char": 24,
								"kind": "function",
								"storageClass": [
									"static"
								]
							},
							{
								"name": "GenNumeric!(T, low, high)",
								"line": 544,
								"char": 5,
								"kind": "mixin"
							}
						],
						"char": 1,
						"kind": "struct"
					}
				],
				"name": "Gen",
				"line": 541,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "low",
						"type": "T",
						"defaultValue": "minimum!T",
						"kind": "value"
					},
					{
						"name": "high",
						"type": "T",
						"defaultValue": "maximum!T",
						"kind": "value"
					}
				],
				"constraint": "from!\"std.traits\".isSomeChar!T",
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "Gen",
						"line": 576,
						"members": [
							{
								"name": "generators",
								"line": 581,
								"type": "AggregateTuple!(Fields!T)",
								"char": 31,
								"kind": "variable"
							},
							{
								"name": "Value",
								"line": 583,
								"type": "T",
								"char": 5,
								"kind": "alias"
							},
							{
								"name": "value",
								"line": 584,
								"type": "Value",
								"char": 11,
								"kind": "variable"
							},
							{
								"endchar": 5,
								"name": "gen",
								"line": 586,
								"type": "@safe T(ref Random rnd)",
								"parameters": [
									{
										"name": "rnd",
										"type": "Random",
										"storageClass": [
											"ref"
										]
									}
								],
								"endline": 596,
								"char": 7,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "opCall",
								"line": 598,
								"type": "inout inout(T)()",
								"endline": 600,
								"char": 14,
								"kind": "function"
							}
						],
						"char": 1,
						"kind": "struct"
					}
				],
				"name": "Gen",
				"line": 576,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "from!\"std.traits\".isAggregateType!T",
				"char": 1,
				"kind": "template"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/randomized/package.d",
		"name": "unit_threaded.randomized",
		"members": [
			{
				"name": "unit_threaded.randomized.gen",
				"line": 3,
				"char": 15,
				"kind": "import"
			},
			{
				"name": "unit_threaded.randomized.random",
				"line": 4,
				"char": 15,
				"kind": "import"
			},
			{
				"name": "unit_threaded.randomized.benchmark",
				"line": 5,
				"char": 15,
				"kind": "import"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/randomized/random.d",
		"name": "unit_threaded.randomized.random",
		"members": [
			{
				"members": [
					{
						"name": "RndValueGen",
						"line": 9,
						"members": [
							{
								"name": "generators",
								"line": 18,
								"type": "T[1 .. __dollar]",
								"char": 9,
								"kind": "alias"
							},
							{
								"name": "parameterNames",
								"line": 19,
								"type": "string[]",
								"init": "T[0]",
								"char": 18,
								"kind": "variable"
							},
							{
								"name": "Values",
								"line": 25,
								"type": "staticMap!(ParameterToGen, generators)",
								"char": 5,
								"kind": "alias"
							},
							{
								"name": "values",
								"line": 28,
								"comment": "Ditto\n",
								"type": "Values",
								"char": 12,
								"kind": "variable"
							},
							{
								"endchar": 5,
								"name": "this",
								"line": 34,
								"type": "@safe (Random* rnd)",
								"parameters": [
									{
										"name": "rnd",
										"type": "Random*"
									}
								],
								"endline": 37,
								"char": 5,
								"kind": "constructor"
							},
							{
								"endchar": 5,
								"name": "this",
								"line": 39,
								"type": "(ref Random rnd)",
								"parameters": [
									{
										"name": "rnd",
										"type": "Random",
										"storageClass": [
											"ref"
										]
									}
								],
								"endline": 41,
								"char": 5,
								"kind": "constructor"
							},
							{
								"name": "rnd",
								"line": 46,
								"type": "Random*",
								"char": 13,
								"kind": "variable"
							},
							{
								"endchar": 5,
								"name": "genValues",
								"line": 51,
								"comment": " A call to this member function will call $(D gen) on all items in\n        $(D values) passing $(D the provided) random number generator\n",
								"type": "void()",
								"endline": 58,
								"char": 10,
								"kind": "function"
							},
							{
								"endchar": 5,
								"name": "toString",
								"line": 60,
								"type": "void(scope void delegate(const(char)[]) sink)",
								"parameters": [
									{
										"name": "sink",
										"type": "void delegate(const(char)[])",
										"storageClass": [
											"scope"
										]
									}
								],
								"endline": 68,
								"char": 10,
								"kind": "function"
							}
						],
						"char": 1,
						"kind": "struct"
					}
				],
				"name": "RndValueGen",
				"line": 9,
				"comment": " This type will generate a $(D Gen!T) for all passed $(D T...).\n    Every call to $(D genValues) will call $(D gen) of all $(D Gen) structs\n    present in $(D values). The member $(D values) can be passed to every\n    function accepting $(D T...).\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_randomized_random_d_72_0)\n---\nimport unit_threaded.randomized.gen: Gen;\nimport std.random: Random;\n\nauto rnd = Random(1337);\nauto generator = (&rnd).RndValueGen!([\"i\", \"f\"],\n                                     Gen!(int, 0, 10),\n                                     Gen!(float, 0.0, 10.0));\ngenerator.genValues();\n\nstatic fun(int i, float f)\n{\n    import std.conv: to;\n    assert(i >= 0 && i <= 10, i.to!string);\n    assert(f >= 0.0 && f <= 10.0, f.to!string);\n}\n\nfun(generator.values);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_randomized_random_d_72_0)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "ParameterToGen",
						"line": 157,
						"type": "T",
						"char": 9,
						"kind": "alias"
					}
				],
				"name": "ParameterToGen",
				"line": 153,
				"comment": " A template that turns a $(D T) into a $(D Gen!T) unless $(D T) is\n    already a $(D Gen) or no $(D Gen) for given $(D T) is available.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_randomized_random_d_168_4)\n---\nalias GenInt = ParameterToGen!int;\n\nstatic fun(int i)\n{\n    assert(i == 1337);\n}\n\nGenInt a;\na.value = 1337;\nfun(a);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_randomized_random_d_168_4)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/reflection.d",
		"name": "unit_threaded.reflection",
		"members": [
			{
				"name": "TestFunction",
				"line": 9,
				"comment": " Common data for test functions and test classes\n",
				"deco": "DFZv",
				"char": 23,
				"kind": "alias"
			},
			{
				"name": "TestData",
				"line": 10,
				"members": [
					{
						"offset": 0,
						"name": "name",
						"line": 11,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 16,
						"name": "testFunction",
						"line": 12,
						"comment": "only used for functions, null for classes\n",
						"deco": "DFZv",
						"originalType": "TestFunction",
						"char": 18,
						"kind": "variable"
					},
					{
						"offset": 32,
						"name": "hidden",
						"line": 13,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 33,
						"name": "shouldFail",
						"line": 14,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 34,
						"name": "singleThreaded",
						"line": 15,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 35,
						"name": "builtin",
						"line": 16,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 40,
						"name": "suffix",
						"line": 17,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 56,
						"name": "tags",
						"line": 18,
						"deco": "AAya",
						"char": 14,
						"kind": "variable"
					},
					{
						"offset": 72,
						"name": "exceptionTypeInfo",
						"line": 19,
						"deco": "C8TypeInfo",
						"originalType": "TypeInfo",
						"char": 14,
						"kind": "variable"
					},
					{
						"offset": 80,
						"name": "flakyRetries",
						"line": 20,
						"deco": "i",
						"init": "0",
						"char": 9,
						"kind": "variable"
					},
					{
						"endchar": 5,
						"name": "getPath",
						"line": 22,
						"deco": "xFNaNbZAya",
						"endline": 27,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "isTestClass",
						"line": 29,
						"deco": "xFNaNbNfZb",
						"endline": 31,
						"char": 10,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "allTestData",
						"line": 39,
						"type": "const(TestData)[]()",
						"endline": 58,
						"char": 19,
						"kind": "function"
					}
				],
				"name": "allTestData",
				"line": 39,
				"comment": " Finds all test cases (functions, classes, built-in unittest blocks)\n Template parameters are module strings\n",
				"parameters": [
					{
						"name": "MOD_STRINGS",
						"kind": "tuple"
					}
				],
				"constraint": "from!\"std.meta\".allSatisfy!(from!\"std.traits\".isSomeString, typeof(MOD_STRINGS))",
				"char": 19,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "allTestData",
						"line": 65,
						"type": "const(TestData)[]()",
						"endline": 82,
						"char": 19,
						"kind": "function"
					}
				],
				"name": "allTestData",
				"line": 65,
				"comment": " Finds all test cases (functions, classes, built-in unittest blocks)\n Template parameters are module symbols\n",
				"parameters": [
					{
						"name": "MOD_SYMBOLS",
						"kind": "tuple"
					}
				],
				"constraint": "!from!\"std.meta\".anySatisfy!(from!\"std.traits\".isSomeString, typeof(MOD_SYMBOLS))",
				"char": 19,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "moduleUnitTests",
						"line": 99,
						"type": "pure nothrow TestData[]()",
						"endline": 297,
						"char": 12,
						"kind": "function"
					}
				],
				"name": "moduleUnitTests",
				"line": 99,
				"comment": " Finds all built-in unittest blocks in the given module.\n Recurses into structs, classes, and unions of the module.\n\n @return An array of TestData structs\n",
				"parameters": [
					{
						"name": "module_",
						"kind": "alias"
					}
				],
				"char": 12,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "moduleTestClasses",
						"line": 454,
						"type": "pure nothrow TestData[]()",
						"endline": 483,
						"char": 12,
						"kind": "function"
					}
				],
				"name": "moduleTestClasses",
				"line": 454,
				"comment": " Finds all test classes (classes implementing a test() function)\n in the given module\n",
				"parameters": [
					{
						"name": "module_",
						"kind": "alias"
					}
				],
				"char": 12,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "moduleTestFunctions",
						"line": 490,
						"type": "pure TestData[]()",
						"endline": 540,
						"char": 12,
						"kind": "function"
					}
				],
				"name": "moduleTestFunctions",
				"line": 490,
				"comment": " Finds all test functions in the given module.\n Returns an array of TestData structs\n",
				"parameters": [
					{
						"name": "module_",
						"kind": "alias"
					}
				],
				"char": 12,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "tagsFromAttrs",
						"line": 724,
						"type": "string[]()",
						"endline": 730,
						"char": 10,
						"kind": "function"
					}
				],
				"name": "tagsFromAttrs",
				"line": 724,
				"parameters": [
					{
						"name": "T",
						"kind": "tuple"
					}
				],
				"char": 10,
				"kind": "template"
			},
			{
				"endchar": 5,
				"name": "addModPrefix",
				"line": 740,
				"type": "nothrow (string[] elements, string module_ = \"unit_threaded.tests.module_with_tests\")",
				"parameters": [
					{
						"name": "elements",
						"type": "string[]"
					},
					{
						"name": "module_",
						"type": "string",
						"default": "\"unit_threaded.tests.module_with_tests\""
					}
				],
				"endline": 743,
				"char": 18,
				"kind": "function",
				"storageClass": [
					"auto"
				]
			},
			{
				"endchar": 5,
				"name": "assertFail",
				"line": 771,
				"type": "void(TestCase test, string file = __FILE__, size_t line = __LINE__)",
				"parameters": [
					{
						"name": "test",
						"type": "TestCase"
					},
					{
						"name": "file",
						"type": "string",
						"default": "__FILE__"
					},
					{
						"name": "line",
						"type": "size_t",
						"default": "__LINE__"
					}
				],
				"endline": 779,
				"char": 18,
				"kind": "function"
			},
			{
				"endchar": 5,
				"name": "assertPass",
				"line": 781,
				"type": "void(TestCase test, string file = __FILE__, size_t line = __LINE__)",
				"parameters": [
					{
						"name": "test",
						"type": "TestCase"
					},
					{
						"name": "file",
						"type": "string",
						"default": "__FILE__"
					},
					{
						"name": "line",
						"type": "size_t",
						"default": "__LINE__"
					}
				],
				"endline": 785,
				"char": 18,
				"kind": "function"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/runner.d",
		"name": "unit_threaded.runner",
		"members": [
			{
				"members": [
					{
						"endchar": 5,
						"name": "main",
						"line": 26,
						"type": "int(string[] args)",
						"parameters": [
							{
								"name": "args",
								"type": "string[]"
							}
						],
						"endline": 28,
						"char": 9,
						"kind": "function"
					}
				],
				"name": "runTestsMixin",
				"line": 18,
				"comment": " Runs all tests in passed-in modules. Modules can be symbols or\n strings. Generates a main function and substitutes the default D\n runtime unittest runner. This mixin should be used instead of\n $(D runTests) if a shared library is used instead of an executable.\n",
				"parameters": [
					{
						"name": "Modules",
						"kind": "tuple"
					}
				],
				"constraint": "Modules.length > 0",
				"char": 7,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "runTests",
						"line": 40,
						"type": "int(string[] args)",
						"parameters": [
							{
								"name": "args",
								"type": "string[]"
							}
						],
						"endline": 43,
						"char": 5,
						"kind": "function"
					}
				],
				"name": "runTests",
				"line": 40,
				"comment": " Runs all tests in passed-in modules. Modules can be symbols\n or strings. Arguments are taken from the command-line.\n -s Can be passed to run in single-threaded mode. The rest\n of argv is considered to be test names to be run.\n Params:\n   args = Arguments passed to main.\n Returns: An integer suitable for the program's return code.\n",
				"parameters": [
					{
						"name": "Modules",
						"kind": "tuple"
					}
				],
				"constraint": "Modules.length > 0",
				"char": 5,
				"kind": "template"
			},
			{
				"endchar": 1,
				"name": "runTests",
				"line": 54,
				"comment": " Runs all tests in passed-in testData. Arguments are taken from the\n command-line. `-s` Can be passed to run in single-threaded mode. The\n rest of argv is considered to be test names to be run.\n Params:\n   args = Arguments passed to main.\n   testData = Data about the tests to run.\n Returns: An integer suitable for the program's return code.\n",
				"deco": "FAAyaxAS13unit_threaded10reflection8TestDataZi",
				"parameters": [
					{
						"name": "args",
						"deco": "AAya"
					},
					{
						"name": "testData",
						"deco": "xAS13unit_threaded10reflection8TestData"
					}
				],
				"endline": 57,
				"originalType": "int(string[] args, in from!\"unit_threaded.reflection\".TestData[] testData)",
				"char": 5,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "runTests",
				"line": 59,
				"deco": "FxS13unit_threaded7options7OptionsxASQBi10reflection8TestDataZi",
				"parameters": [
					{
						"name": "options",
						"deco": "xS13unit_threaded7options7Options"
					},
					{
						"name": "testData",
						"deco": "xAS13unit_threaded10reflection8TestData"
					}
				],
				"endline": 70,
				"originalType": "int(in from!\"unit_threaded.options\".Options options, in from!\"unit_threaded.reflection\".TestData[] testData)",
				"char": 5,
				"kind": "function"
			}
		],
		"comment": " This module implements functions to run the unittests with\n command-line options.\n",
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/runtime.d",
		"name": "unit_threaded.runtime",
		"members": [
			{
				"members": [
					{
						"endchar": 5,
						"name": "main",
						"line": 46,
						"type": "int(string[] args)",
						"parameters": [
							{
								"name": "args",
								"type": "string[]"
							}
						],
						"endline": 55,
						"char": 9,
						"kind": "function"
					}
				],
				"name": "genUtMain",
				"line": 44,
				"parameters": [],
				"char": 7,
				"kind": "template"
			},
			{
				"name": "Options",
				"line": 59,
				"members": [
					{
						"offset": 0,
						"name": "verbose",
						"line": 60,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 8,
						"name": "fileName",
						"line": 61,
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 24,
						"name": "dirs",
						"line": 62,
						"deco": "AAya",
						"char": 14,
						"kind": "variable"
					},
					{
						"offset": 40,
						"name": "help",
						"line": 63,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 41,
						"name": "showVersion",
						"line": 64,
						"deco": "b",
						"char": 10,
						"kind": "variable"
					},
					{
						"offset": 48,
						"name": "includes",
						"line": 65,
						"deco": "AAya",
						"char": 14,
						"kind": "variable"
					},
					{
						"offset": 64,
						"name": "files",
						"line": 66,
						"deco": "AAya",
						"char": 14,
						"kind": "variable"
					},
					{
						"endchar": 5,
						"name": "earlyReturn",
						"line": 68,
						"deco": "xFNaNbNfZb",
						"endline": 70,
						"char": 10,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"endchar": 1,
				"name": "getGenUtOptions",
				"line": 74,
				"deco": "FAAyaZS13unit_threaded7runtime7Options",
				"parameters": [
					{
						"name": "args",
						"deco": "AAya"
					}
				],
				"endline": 105,
				"char": 9,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "findModuleEntries",
				"line": 108,
				"deco": "FxS13unit_threaded7runtime7OptionsZAS3std4file8DirEntry",
				"parameters": [
					{
						"name": "options",
						"deco": "xS13unit_threaded7runtime7Options"
					}
				],
				"endline": 139,
				"originalType": "from!\"std.file\".DirEntry[](in Options options)",
				"char": 28,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "toDirEntry",
				"line": 141,
				"deco": "FAyaZS3std4file8DirEntry",
				"parameters": [
					{
						"name": "a",
						"deco": "Aya"
					}
				],
				"endline": 144,
				"originalType": "(string a)",
				"char": 6,
				"kind": "function",
				"storageClass": [
					"auto"
				]
			},
			{
				"endchar": 1,
				"name": "removePackage",
				"line": 148,
				"deco": "FAyaZQe",
				"parameters": [
					{
						"name": "name",
						"deco": "Aya"
					}
				],
				"endline": 155,
				"char": 8,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "findModuleNames",
				"line": 181,
				"deco": "FxS13unit_threaded7runtime7OptionsZAAya",
				"parameters": [
					{
						"name": "options",
						"deco": "xS13unit_threaded7runtime7Options"
					}
				],
				"endline": 208,
				"originalType": "string[](in Options options)",
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "writeUtMainFile",
				"line": 210,
				"deco": "FAAyaZQe",
				"parameters": [
					{
						"name": "args",
						"deco": "AAya"
					}
				],
				"endline": 213,
				"char": 8,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "writeUtMainFile",
				"line": 215,
				"deco": "FS13unit_threaded7runtime7OptionsZAya",
				"parameters": [
					{
						"name": "options",
						"deco": "S13unit_threaded7runtime7Options"
					}
				],
				"endline": 221,
				"char": 8,
				"kind": "function"
			}
		],
		"comment": "This module implements a $(LINK2 http://dlang.org/template-mixin.html,\ntemplate mixin) containing a program to search a list of directories\nfor all .d files therein, then writes a D program to run all unit\ntests in those files using unit_threaded. The program\nimplemented by this mixin only writes out a D file that itself must be\ncompiled and run.\n\nTo use this as a runnable program, simply mix in and compile:\n-----\n#!/usr/bin/rdmd\nimport unit_threaded;\nmixin genUtMain;\n-----\n\nGenerally however, this code will be used by the gen_ut_main\ndub configuration via `dub run`.\n\nBy default, genUtMain will look for unit tests in CWD\nand write a program out to a temporary file. To change\nthe file to write to, use the $(D -f) option. To change what\ndirectories to look in, simply pass them in as the remaining\ncommand-line arguments.\n\nThe resulting file is also a program that must be compiled and, when\nrun, will run the unit tests found. By default, it will run all\ntests. To run one test or all tests in a particular package, pass them\nin as command-line arguments.  The $(D -h) option will list all\ncommand-line options.\n\nExamples (assuming the generated file is called $(D ut.d)):\n-----\nrdmd -unittest ut.d # run all tests\nrdmd -unittest ut.d tests.foo tests.bar # run all tests from these packages\nrdmd ut.d -h # list command-line options\n-----\n",
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/should.d",
		"name": "unit_threaded.should",
		"members": [
			{
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 18,
						"deco": "FNaNbNfxAyaAyamC6object9ThrowableZC13unit_threaded6should17UnitTestException",
						"parameters": [
							{
								"name": "msg",
								"deco": "xAya"
							},
							{
								"name": "file",
								"deco": "Aya",
								"default": "__FILE__"
							},
							{
								"name": "line",
								"deco": "m",
								"default": "cast(ulong)__LINE__"
							},
							{
								"name": "next",
								"deco": "C6object9Throwable",
								"default": "null"
							}
						],
						"endline": 22,
						"originalType": "pure nothrow @safe (in string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 24,
						"deco": "FNaNbNfxAAyaAyamC6object9ThrowableZC13unit_threaded6should17UnitTestException",
						"parameters": [
							{
								"name": "msgLines",
								"deco": "xAAya"
							},
							{
								"name": "file",
								"deco": "Aya",
								"default": "__FILE__"
							},
							{
								"name": "line",
								"deco": "m",
								"default": "cast(ulong)__LINE__"
							},
							{
								"name": "next",
								"deco": "C6object9Throwable",
								"default": "null"
							}
						],
						"endline": 30,
						"originalType": "pure nothrow @safe (in string[] msgLines, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "toString",
						"line": 32,
						"deco": "xFNaNfZAya",
						"endline": 36,
						"char": 21,
						"kind": "function",
						"overrides": [
							"object.Throwable.toString"
						],
						"storageClass": [
							"override"
						]
					}
				],
				"name": "UnitTestException",
				"line": 16,
				"comment": " An exception to signal that a test case has failed.\n",
				"base": "object.Exception",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeTrue",
						"line": 53,
						"type": "void(lazy E condition, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "condition",
								"type": "E",
								"storageClass": [
									"lazy"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 56,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeTrue",
				"line": 53,
				"comment": " Verify that the condition is `true`.\n Throws: UnitTestException on failure.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_59_0)\n---\nshouldBeTrue(true);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_59_0)\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeFalse",
						"line": 77,
						"type": "void(lazy E condition, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "condition",
								"type": "E",
								"storageClass": [
									"lazy"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 80,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeFalse",
				"line": 77,
				"comment": " Verify that the condition is `false`.\n Throws: UnitTestException on failure.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_83_2)\n---\nshouldBeFalse(false);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_83_2)\n",
				"parameters": [
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldEqual",
						"line": 102,
						"type": "void(auto ref V value, auto ref E expected, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "V",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "expected",
								"type": "E",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 110,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldEqual",
				"line": 102,
				"comment": " Verify that two values are the same.\n Floating point values are compared using $(D std.math.approxEqual).\n Throws: UnitTestException on failure\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_113_4)\n---\nshouldEqual(true, true);\nshouldEqual(false, false);\nshouldEqual(1, 1) ;\nshouldEqual(\"foo\", \"foo\") ;\nshouldEqual([2, 3], [2, 3]) ;\n\nshouldEqual(iota(3), [0, 1, 2]);\nshouldEqual([[0, 1], [0, 1, 2]], [[0, 1], [0, 1, 2]]);\nshouldEqual([[0, 1], [0, 1, 2]], [iota(2), iota(3)]);\nshouldEqual([iota(2), iota(3)], [[0, 1], [0, 1, 2]]);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_113_4)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_128_5)\n---\n//impure comparisons\nshouldEqual(1.0, 1.0) ;\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_128_5)\n",
				"parameters": [
					{
						"name": "V",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldNotEqual",
						"line": 137,
						"type": "void(V value, E expected, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "V"
							},
							{
								"name": "expected",
								"type": "E"
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 148,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldNotEqual",
				"line": 137,
				"comment": " Verify that two values are not the same.\n Throws: UnitTestException on failure\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_151_6)\n---\nshouldNotEqual(true, false);\nshouldNotEqual(1, 2);\nshouldNotEqual(\"f\", \"b\");\nshouldNotEqual([2, 3], [2, 3, 4]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_151_6)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_160_7)\n---\nshouldNotEqual(1.0, 2.0);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_160_7)\n",
				"parameters": [
					{
						"name": "V",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeNull",
						"line": 238,
						"type": "void(auto ref T value, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 242,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeNull",
				"line": 238,
				"comment": " Verify that the value is null.\n Throws: UnitTestException on failure\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_245_12)\n---\nshouldBeNull(null);\nassertFail(shouldBeNull(new int));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_245_12)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldNotBeNull",
						"line": 256,
						"type": "void(auto ref T value, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 260,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldNotBeNull",
				"line": 256,
				"comment": " Verify that the value is not null.\n Throws: UnitTestException on failure\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_263_13)\n---\nclass Foo\n{\n    this(int i) { this.i = i; }\n    override string toString() const\n    {\n        import std.conv: to;\n        return i.to!string;\n    }\n    int i;\n}\n\nshouldNotBeNull(new Foo(4));\nassertFail(shouldNotBeNull(null));\nshouldEqual(new Foo(5), new Foo(5));\nassertFail(shouldEqual(new Foo(5), new Foo(4)));\nshouldNotEqual(new Foo(5), new Foo(4)) ;\nassertFail(shouldNotEqual(new Foo(5), new Foo(5)));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_263_13)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "isLikeAssociativeArray",
						"line": 284,
						"init": "is(typeof(()\n{\nif (K.init in T)\n{\n}\nif (!(K.init in T))\n{\n}\n}\n))",
						"char": 6,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "isLikeAssociativeArray",
				"line": 284,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "K",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeIn",
						"line": 297,
						"type": "void(auto ref T value, auto ref U container, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "container",
								"type": "U",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 307,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeIn",
				"line": 297,
				"comment": " Verify that the value is in the container.\n Throws: UnitTestException on failure\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_310_14)\n---\n5.shouldBeIn([5: \"foo\"]);\n\nstruct AA {\n    int onlyKey;\n    bool opBinaryRight(string op)(in int key) const {\n        return key == onlyKey;\n    }\n}\n\n5.shouldBeIn(AA(5));\nassertFail(5.shouldBeIn(AA(4)));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_310_14)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "U",
						"kind": "type"
					}
				],
				"constraint": "isLikeAssociativeArray!(U, T)",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeIn",
						"line": 328,
						"type": "void(auto ref T value, U container, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "container",
								"type": "U"
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 339,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeIn",
				"line": 328,
				"comment": " Verify that the value is in the container.\n Throws: UnitTestException on failure\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_342_15)\n---\nshouldBeIn(4, [1, 2, 4]);\nshouldBeIn(\"foo\", [\"foo\" : 1]);\nassertFail(\"foo\".shouldBeIn([\"bar\"]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_342_15)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "U",
						"kind": "type"
					}
				],
				"constraint": "!isLikeAssociativeArray!(U, T) && isInputRange!U",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldNotBeIn",
						"line": 354,
						"type": "void(auto ref T value, auto ref U container, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "container",
								"type": "U",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 365,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldNotBeIn",
				"line": 354,
				"comment": " Verify that the value is not in the container.\n Throws: UnitTestException on failure\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_368_16)\n---\n5.shouldNotBeIn([4: \"foo\"]);\n\nstruct AA {\n    int onlyKey;\n    bool opBinaryRight(string op)(in int key) const {\n        return key == onlyKey;\n    }\n}\n\n5.shouldNotBeIn(AA(4));\nassertFail(5.shouldNotBeIn(AA(5)));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_368_16)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "U",
						"kind": "type"
					}
				],
				"constraint": "isLikeAssociativeArray!(U, T)",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldNotBeIn",
						"line": 387,
						"type": "void(auto ref T value, U container, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "container",
								"type": "U"
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 399,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldNotBeIn",
				"line": 387,
				"comment": " Verify that the value is not in the container.\n Throws: UnitTestException on failure\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_402_17)\n---\nshouldNotBeIn(3.5, [1.1, 2.2, 4.4]);\nshouldNotBeIn(1.0, [2.0 : 1, 3.0 : 2]);\nassertFail(\"foo\".shouldNotBeIn([\"foo\"]));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_402_17)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "U",
						"kind": "type"
					}
				],
				"constraint": "!isLikeAssociativeArray!(U, T) && isInputRange!U",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldThrow",
						"line": 417,
						"type": "(lazy E expr, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "expr",
								"type": "E",
								"storageClass": [
									"lazy"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 432,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "shouldThrow",
				"line": 417,
				"comment": " Verify that expr throws the templated Exception class.\n This succeeds if the expression throws a child class of\n the template parameter.\n Returns: The caught throwable.\n Throws: UnitTestException on failure (when expr does not\n throw the expected exception)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_435_18)\n---\nimport unit_threaded.asserts;\nvoid funcThrows(string msg) { throw new Exception(msg); }\ntry {\n    auto exception = funcThrows(\"foo bar\").shouldThrow;\n    assertEqual(exception.msg, \"foo bar\");\n} catch(Exception e) {\n    assert(false, \"should not have thrown anything and threw: \" ~ e.msg);\n}\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_435_18)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_447_19)\n---\nimport unit_threaded.asserts;\nvoid func() {}\ntry {\n    func.shouldThrow;\n    assert(false, \"Should never get here\");\n} catch(Exception e)\n    assertEqual(e.msg, \"Expression did not throw\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_447_19)\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_458_20)\n---\nimport unit_threaded.asserts;\nvoid funcAsserts() { assert(false); }\ntry {\n    funcAsserts.shouldThrow;\n    assert(false, \"Should never get here\");\n} catch(Exception e)\n    assertEqual(e.msg, \"Expression threw core.exception.AssertError instead of the expected Exception\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_458_20)\n",
				"parameters": [
					{
						"name": "T",
						"deco": "C6object9Throwable",
						"default": "Exception",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldThrowExactly",
						"line": 477,
						"type": "(lazy E expr, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "expr",
								"type": "E",
								"storageClass": [
									"lazy"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 493,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "shouldThrowExactly",
				"line": 477,
				"comment": " Verify that expr throws the templated Exception class.\n This only succeeds if the expression throws an exception of\n the exact type of the template parameter.\n Returns: The caught throwable.\n Throws: UnitTestException on failure (when expr does not\n throw the expected exception)\n",
				"parameters": [
					{
						"name": "T",
						"deco": "C6object9Throwable",
						"default": "Exception",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldNotThrow",
						"line": 499,
						"type": "void(lazy E expr, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "expr",
								"type": "E",
								"storageClass": [
									"lazy"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 504,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldNotThrow",
				"line": 499,
				"comment": " Verify that expr does not throw the templated Exception class.\n Throws: UnitTestException on failure\n",
				"parameters": [
					{
						"name": "T",
						"deco": "C6object9Throwable",
						"default": "Exception",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldThrowWithMessage",
						"line": 516,
						"type": "void(lazy E expr, string msg, string file = __FILE__, size_t line = __LINE__)",
						"parameters": [
							{
								"name": "expr",
								"type": "E",
								"storageClass": [
									"lazy"
								]
							},
							{
								"name": "msg",
								"type": "string"
							},
							{
								"name": "file",
								"type": "string",
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"default": "__LINE__"
							}
						],
						"endline": 525,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldThrowWithMessage",
				"line": 516,
				"comment": " Verify that an exception is thrown with the right message\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_528_22)\n---\nvoid funcThrows(string msg) { throw new Exception(msg); }\nfuncThrows(\"foo bar\").shouldThrowWithMessage!Exception(\"foo bar\");\nfuncThrows(\"foo bar\").shouldThrowWithMessage(\"foo bar\");\nassertFail(funcThrows(\"boo boo\").shouldThrowWithMessage(\"foo bar\"));\nvoid func() {}\nassertFail(func.shouldThrowWithMessage(\"oops\"));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_528_22)\n",
				"parameters": [
					{
						"name": "T",
						"deco": "C6object9Throwable",
						"default": "Exception",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"endchar": 1,
				"name": "fail",
				"line": 647,
				"deco": "FNaNfxAyaxQexmZv",
				"parameters": [
					{
						"name": "output",
						"deco": "xAya"
					},
					{
						"name": "file",
						"deco": "xAya"
					},
					{
						"name": "line",
						"deco": "xm"
					}
				],
				"endline": 650,
				"originalType": "pure @safe void(in string output, in string file, in size_t line)",
				"char": 6,
				"kind": "function"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldApproxEqual",
						"line": 753,
						"type": "void(in V value, in E expected, string file = __FILE__, size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "V",
								"storageClass": [
									"in"
								]
							},
							{
								"name": "expected",
								"type": "E",
								"storageClass": [
									"in"
								]
							},
							{
								"name": "file",
								"type": "string",
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"default": "__LINE__"
							}
						],
						"endline": 763,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldApproxEqual",
				"line": 753,
				"parameters": [
					{
						"name": "V",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"constraint": "!isObject!V && (isFloatingPoint!V || isFloatingPoint!E) && is(typeof(value == expected) == bool)",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeEmpty",
						"line": 867,
						"type": "void(auto ref R rng, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "rng",
								"type": "R",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 873,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeEmpty",
				"line": 867,
				"comment": " Verify that rng is empty.\n Throws: UnitTestException on failure.\n",
				"parameters": [
					{
						"name": "R",
						"kind": "type"
					}
				],
				"constraint": "isInputRange!R",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeEmpty",
						"line": 879,
						"type": "void(auto ref shared(R) rng, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "rng",
								"type": "shared(R)",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 885,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeEmpty",
				"line": 879,
				"comment": " Verify that rng is empty.\n Throws: UnitTestException on failure.\n",
				"parameters": [
					{
						"name": "R",
						"kind": "type"
					}
				],
				"constraint": "isInputRange!R",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeEmpty",
						"line": 892,
						"type": "void(auto ref T aa, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "aa",
								"type": "T",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 897,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeEmpty",
				"line": 892,
				"comment": " Verify that aa is empty.\n Throws: UnitTestException on failure.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_900_31)\n---\nint[] ints;\nstring[] strings;\nstring[string] aa;\n\nshouldBeEmpty(ints);\nshouldBeEmpty(strings);\nshouldBeEmpty(aa);\n\nints ~= 1;\nstrings ~= \"foo\";\naa[\"foo\"] = \"bar\";\n\nassertFail(shouldBeEmpty(ints));\nassertFail(shouldBeEmpty(strings));\nassertFail(shouldBeEmpty(aa));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_900_31)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "isAssociativeArray!T",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldNotBeEmpty",
						"line": 924,
						"type": "void(R rng, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "rng",
								"type": "R"
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 929,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldNotBeEmpty",
				"line": 924,
				"comment": " Verify that rng is not empty.\n Throws: UnitTestException on failure.\n",
				"parameters": [
					{
						"name": "R",
						"kind": "type"
					}
				],
				"constraint": "isInputRange!R",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldNotBeEmpty",
						"line": 935,
						"type": "void(auto ref T aa, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "aa",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 941,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldNotBeEmpty",
				"line": 935,
				"comment": " Verify that aa is not empty.\n Throws: UnitTestException on failure.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_944_32)\n---\nint[] ints;\nstring[] strings;\nstring[string] aa;\n\nassertFail(shouldNotBeEmpty(ints));\nassertFail(shouldNotBeEmpty(strings));\nassertFail(shouldNotBeEmpty(aa));\n\nints ~= 1;\nstrings ~= \"foo\";\naa[\"foo\"] = \"bar\";\n\nshouldNotBeEmpty(ints);\nshouldNotBeEmpty(strings);\nshouldNotBeEmpty(aa);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_944_32)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "isAssociativeArray!T",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeGreaterThan",
						"line": 967,
						"type": "void(auto ref T t, auto ref U u, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "t",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "u",
								"type": "U",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 973,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeGreaterThan",
				"line": 967,
				"comment": " Verify that t is greater than u.\n Throws: UnitTestException on failure.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_976_33)\n---\nshouldBeGreaterThan(7, 5);\nassertFail(shouldBeGreaterThan(5, 7));\nassertFail(shouldBeGreaterThan(7, 7));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_976_33)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "U",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeSmallerThan",
						"line": 988,
						"type": "void(auto ref T t, auto ref U u, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "t",
								"type": "T",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "u",
								"type": "U",
								"storageClass": [
									"auto",
									"in",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 994,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeSmallerThan",
				"line": 988,
				"comment": " Verify that t is smaller than u.\n Throws: UnitTestException on failure.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_997_34)\n---\nshouldBeSmallerThan(5, 7);\nassertFail(shouldBeSmallerThan(7, 5));\nassertFail(shouldBeSmallerThan(7, 7));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_997_34)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					},
					{
						"name": "U",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldBeSameSetAs",
						"line": 1010,
						"type": "void(auto ref V value, auto ref E expected, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "V",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "expected",
								"type": "E",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 1019,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldBeSameSetAs",
				"line": 1010,
				"comment": " Verify that t and u represent the same set (ordering is not important).\n Throws: UnitTestException on failure.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_1022_35)\n---\nauto inOrder = iota(4);\nauto noOrder = [2, 3, 0, 1];\nauto oops = [2, 3, 4, 5];\n\ninOrder.shouldBeSameSetAs(noOrder);\ninOrder.shouldBeSameSetAs(oops).shouldThrow!UnitTestException;\n\nstruct Struct\n{\n    int i;\n}\n\n[Struct(1), Struct(4)].shouldBeSameSetAs([Struct(4), Struct(1)]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_1022_35)\n",
				"parameters": [
					{
						"name": "V",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"constraint": "isInputRange!V && isInputRange!E && is(typeof(value.front != expected.front) == bool)",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "shouldNotBeSameSetAs",
						"line": 1059,
						"type": "void(auto ref V value, auto ref E expected, in string file = __FILE__, in size_t line = __LINE__)",
						"parameters": [
							{
								"name": "value",
								"type": "V",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "expected",
								"type": "E",
								"storageClass": [
									"auto",
									"ref"
								]
							},
							{
								"name": "file",
								"type": "string",
								"storageClass": [
									"in"
								],
								"default": "__FILE__"
							},
							{
								"name": "line",
								"type": "size_t",
								"storageClass": [
									"in"
								],
								"default": "__LINE__"
							}
						],
						"endline": 1071,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "shouldNotBeSameSetAs",
				"line": 1059,
				"comment": " Verify that value and expected do not represent the same set (ordering is not important).\n Throws: UnitTestException on failure.\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_1075_36)\n---\nauto inOrder = iota(4);\nauto noOrder = [2, 3, 0, 1];\nauto oops = [2, 3, 4, 5];\n\ninOrder.shouldNotBeSameSetAs(oops);\ninOrder.shouldNotBeSameSetAs(noOrder).shouldThrow!UnitTestException;\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_1075_36)\n",
				"parameters": [
					{
						"name": "V",
						"kind": "type"
					},
					{
						"name": "E",
						"kind": "type"
					}
				],
				"constraint": "isInputRange!V && isInputRange!E && is(typeof(value.front != expected.front) == bool)",
				"char": 6,
				"kind": "template"
			},
			{
				"endchar": 1,
				"name": "shouldBeSameJsonAs",
				"line": 1094,
				"comment": "   If two strings represent the same JSON regardless of formatting\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_should_d_1113_38)\n---\n // not pure because parseJSON isn't pure\nimport unit_threaded.asserts;\n`{\"foo\": \"bar\"}`.shouldBeSameJsonAs(`{\"foo\": \"bar\"}`);\n`{\"foo\":    \"bar\"}`.shouldBeSameJsonAs(`{\"foo\":\"bar\"}`);\n`{\"foo\":\"bar\"}`.shouldBeSameJsonAs(`{\"foo\": \"baz\"}`).shouldThrow!UnitTestException;\ntry\n    `oops`.shouldBeSameJsonAs(`oops`);\ncatch(Exception e)\n    assertEqual(e.msg, \"Error parsing JSON: Unexpected character 'o'. (Line 1:1)\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_should_d_1113_38)\n",
				"deco": "FNexAyaxQexQhxmZv",
				"parameters": [
					{
						"name": "actual",
						"deco": "xAya"
					},
					{
						"name": "expected",
						"deco": "xAya"
					},
					{
						"name": "file",
						"deco": "xAya",
						"default": "__FILE__"
					},
					{
						"name": "line",
						"deco": "xm",
						"default": "cast(const(ulong))__LINE__"
					}
				],
				"endline": 1110,
				"originalType": "@trusted void(in string actual, in string expected, in string file = __FILE__, in size_t line = __LINE__)",
				"char": 6,
				"kind": "function"
			}
		],
		"comment": " This module implements custom assertions via $(D shouldXXX) functions\n that throw exceptions containing information about why the assertion\n failed.\n",
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/testcase.d",
		"name": "unit_threaded.testcase",
		"members": [
			{
				"endchar": 1,
				"name": "enableStackTrace",
				"line": 13,
				"comment": "Let AssertError(s) propagate and thus dump a stacktrace.\n",
				"deco": "FNbNiNfZv",
				"endline": 15,
				"char": 13,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "disableStackTrace",
				"line": 18,
				"comment": "(Default behavior) Catch AssertError(s) and thus allow all tests to be ran.\n",
				"deco": "FNbNiNfZv",
				"endline": 20,
				"char": 13,
				"kind": "function"
			},
			{
				"name": "TestCase",
				"line": 25,
				"comment": " Class from which other test cases derive\n",
				"members": [
					{
						"endchar": 5,
						"name": "getPath",
						"line": 32,
						"comment": " Returns: the name of the test\n",
						"deco": "xFNaNbZAya",
						"endline": 34,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "opCall",
						"line": 40,
						"comment": " Executes the test.\n Returns: array of failures (child classes may have more than 1)\n",
						"deco": "FZAAya",
						"endline": 51,
						"char": 14,
						"kind": "function"
					},
					{
						"endchar": 43,
						"name": "numTestsRun",
						"line": 56,
						"comment": "     Certain child classes override this\n",
						"deco": "xFZm",
						"endline": 56,
						"char": 11,
						"kind": "function"
					},
					{
						"endchar": 64,
						"name": "showChrono",
						"line": 57,
						"deco": "FNaNbNfZv",
						"endline": 57,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 74,
						"name": "setOutput",
						"line": 58,
						"deco": "FNaNbNfC13unit_threaded2io6OutputZv",
						"parameters": [
							{
								"name": "output",
								"deco": "C13unit_threaded2io6Output"
							}
						],
						"endline": 58,
						"char": 10,
						"kind": "function"
					},
					{
						"name": "test",
						"line": 74,
						"protection": "protected",
						"deco": "FZv",
						"char": 19,
						"kind": "function",
						"storageClass": [
							"abstract"
						]
					},
					{
						"endchar": 20,
						"name": "setup",
						"line": 75,
						"protection": "protected",
						"comment": "override to run before test()\n",
						"deco": "FZv",
						"endline": 75,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 23,
						"name": "shutdown",
						"line": 76,
						"protection": "protected",
						"comment": "override to run after test()\n",
						"deco": "FZv",
						"endline": 76,
						"char": 10,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "class"
			},
			{
				"members": [
					{
						"endchar": 40,
						"name": "add",
						"line": 131,
						"deco": "FC13unit_threaded8testcase8TestCaseZv",
						"parameters": [
							{
								"name": "t",
								"deco": "C13unit_threaded8testcase8TestCase"
							}
						],
						"endline": 131,
						"char": 10,
						"kind": "function"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opOpAssign",
								"line": 133,
								"type": "void(TestCase t)",
								"parameters": [
									{
										"name": "t",
										"type": "TestCase"
									}
								],
								"endline": 135,
								"char": 10,
								"kind": "function"
							}
						],
						"name": "opOpAssign",
						"line": 133,
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"specValue": "\"~\"",
								"kind": "value"
							}
						],
						"char": 10,
						"kind": "template"
					},
					{
						"endchar": 5,
						"name": "opCall",
						"line": 137,
						"deco": "FZAAya",
						"endline": 140,
						"char": 23,
						"kind": "function",
						"overrides": [
							"unit_threaded.testcase.TestCase.opCall"
						],
						"storageClass": [
							"override"
						]
					},
					{
						"endchar": 92,
						"name": "test",
						"line": 142,
						"deco": "FZv",
						"endline": 142,
						"char": 19,
						"kind": "function",
						"overrides": [
							"unit_threaded.testcase.TestCase.test"
						],
						"storageClass": [
							"override"
						]
					},
					{
						"endchar": 5,
						"name": "numTestsRun",
						"line": 144,
						"deco": "xFZm",
						"endline": 146,
						"char": 20,
						"kind": "function",
						"overrides": [
							"unit_threaded.testcase.TestCase.numTestsRun"
						],
						"storageClass": [
							"override"
						]
					},
					{
						"endchar": 5,
						"name": "showChrono",
						"line": 152,
						"deco": "FNaNbNfZv",
						"endline": 154,
						"originalType": "void()",
						"char": 19,
						"kind": "function",
						"overrides": [
							"unit_threaded.testcase.TestCase.showChrono"
						],
						"storageClass": [
							"override"
						]
					}
				],
				"name": "CompositeTestCase",
				"line": 130,
				"base": "unit_threaded.testcase.TestCase",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 162,
						"deco": "FC13unit_threaded8testcase8TestCasexC8TypeInfoZCQBuQBi18ShouldFailTestCase",
						"parameters": [
							{
								"name": "testCase",
								"deco": "C13unit_threaded8testcase8TestCase"
							},
							{
								"name": "exceptionTypeInfo",
								"deco": "xC8TypeInfo"
							}
						],
						"endline": 165,
						"originalType": "(TestCase testCase, in TypeInfo exceptionTypeInfo)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "getPath",
						"line": 167,
						"deco": "xFNaNbZAya",
						"endline": 169,
						"char": 21,
						"kind": "function",
						"overrides": [
							"unit_threaded.testcase.TestCase.getPath"
						],
						"storageClass": [
							"override"
						]
					},
					{
						"endchar": 5,
						"name": "test",
						"line": 171,
						"deco": "FZv",
						"endline": 181,
						"char": 19,
						"kind": "function",
						"overrides": [
							"unit_threaded.testcase.TestCase.test"
						],
						"storageClass": [
							"override"
						]
					}
				],
				"name": "ShouldFailTestCase",
				"line": 161,
				"base": "unit_threaded.testcase.TestCase",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 193,
						"deco": "FNaNbxS13unit_threaded10reflection8TestDataZCQBm8testcase16FunctionTestCase",
						"parameters": [
							{
								"name": "data",
								"deco": "xS13unit_threaded10reflection8TestData"
							}
						],
						"endline": 196,
						"originalType": "pure nothrow (in TestData data)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "test",
						"line": 198,
						"deco": "FZv",
						"endline": 200,
						"char": 19,
						"kind": "function",
						"overrides": [
							"unit_threaded.testcase.TestCase.test"
						],
						"storageClass": [
							"override"
						]
					},
					{
						"endchar": 5,
						"name": "getPath",
						"line": 202,
						"deco": "xFNaNbZAya",
						"endline": 204,
						"char": 21,
						"kind": "function",
						"overrides": [
							"unit_threaded.testcase.TestCase.getPath"
						],
						"storageClass": [
							"override"
						]
					}
				],
				"name": "FunctionTestCase",
				"line": 189,
				"base": "unit_threaded.testcase.TestCase",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 214,
						"deco": "FNaNbxS13unit_threaded10reflection8TestDataZCQBm8testcase15BuiltinTestCase",
						"parameters": [
							{
								"name": "data",
								"deco": "xS13unit_threaded10reflection8TestData"
							}
						],
						"endline": 216,
						"originalType": "pure nothrow (in TestData data)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "test",
						"line": 218,
						"deco": "FZv",
						"endline": 227,
						"char": 19,
						"kind": "function",
						"overrides": [
							"unit_threaded.testcase.FunctionTestCase.test"
						],
						"storageClass": [
							"override"
						]
					}
				],
				"name": "BuiltinTestCase",
				"line": 210,
				"base": "unit_threaded.testcase.FunctionTestCase",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 232,
						"deco": "FC13unit_threaded8testcase8TestCaseiZCQBkQy13FlakyTestCase",
						"parameters": [
							{
								"name": "testCase",
								"deco": "C13unit_threaded8testcase8TestCase"
							},
							{
								"name": "retries",
								"deco": "i"
							}
						],
						"endline": 235,
						"originalType": "(TestCase testCase, int retries)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "getPath",
						"line": 237,
						"deco": "xFNaNbZAya",
						"endline": 239,
						"char": 21,
						"kind": "function",
						"overrides": [
							"unit_threaded.testcase.TestCase.getPath"
						],
						"storageClass": [
							"override"
						]
					},
					{
						"endchar": 5,
						"name": "test",
						"line": 241,
						"deco": "FZv",
						"endline": 252,
						"char": 19,
						"kind": "function",
						"overrides": [
							"unit_threaded.testcase.TestCase.test"
						],
						"storageClass": [
							"override"
						]
					}
				],
				"name": "FlakyTestCase",
				"line": 231,
				"base": "unit_threaded.testcase.TestCase",
				"char": 1,
				"kind": "class"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/tests/issue33.d",
		"name": "unit_threaded.tests.issue33",
		"members": [],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/tests/module_with_attrs.d",
		"name": "unit_threaded.tests.module_with_attrs",
		"members": [
			{
				"endchar": 20,
				"name": "testAttrs",
				"line": 9,
				"deco": "FZv",
				"endline": 9,
				"char": 6,
				"kind": "function"
			},
			{
				"endchar": 24,
				"name": "testOtherAttrs",
				"line": 12,
				"deco": "FZv",
				"endline": 12,
				"char": 6,
				"kind": "function"
			},
			{
				"endchar": 26,
				"name": "testValues",
				"line": 17,
				"deco": "FiZv",
				"parameters": [
					{
						"name": "i",
						"deco": "i"
					}
				],
				"endline": 17,
				"char": 6,
				"kind": "function"
			},
			{
				"members": [
					{
						"endchar": 62,
						"name": "this",
						"line": 31,
						"deco": "FAyaZC13unit_threaded5tests17module_with_attrs13TestException",
						"parameters": [
							{
								"name": "m",
								"deco": "Aya"
							}
						],
						"endline": 31,
						"originalType": "(string m)",
						"char": 35,
						"kind": "constructor"
					}
				],
				"name": "TestException",
				"line": 31,
				"base": "object.Exception",
				"char": 1,
				"kind": "class"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/tests/module_with_setup.d",
		"name": "unit_threaded.tests.module_with_setup",
		"members": [
			{
				"name": "gNumBefore",
				"line": 5,
				"deco": "i",
				"char": 5,
				"kind": "variable"
			},
			{
				"name": "gNumAfter",
				"line": 6,
				"deco": "i",
				"char": 5,
				"kind": "variable"
			},
			{
				"endchar": 1,
				"name": "before",
				"line": 9,
				"deco": "FZv",
				"endline": 11,
				"char": 6,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "after",
				"line": 14,
				"deco": "FZv",
				"endline": 16,
				"char": 6,
				"kind": "function"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/tests/module_with_tests.d",
		"name": "unit_threaded.tests.module_with_tests",
		"members": [
			{
				"endchar": 21,
				"name": "testFoo",
				"line": 14,
				"type": "void()",
				"endline": 14,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 21,
				"name": "testBar",
				"line": 15,
				"type": "void()",
				"endline": 15,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 34,
				"name": "testPrivate",
				"line": 16,
				"type": "void()",
				"endline": 16,
				"char": 18,
				"kind": "function"
			},
			{
				"endchar": 54,
				"name": "funcThatShouldShowUpCosOfAttr",
				"line": 17,
				"type": "void()",
				"endline": 17,
				"char": 20,
				"kind": "function"
			},
			{
				"endchar": 29,
				"name": "someFun",
				"line": 20,
				"type": "void()",
				"endline": 20,
				"char": 18,
				"kind": "function"
			},
			{
				"endchar": 34,
				"name": "testosterone",
				"line": 21,
				"type": "void()",
				"endline": 21,
				"char": 18,
				"kind": "function"
			},
			{
				"endchar": 25,
				"name": "tes",
				"line": 22,
				"type": "void()",
				"endline": 22,
				"char": 18,
				"kind": "function"
			},
			{
				"name": "testInt",
				"line": 25,
				"deco": "i",
				"char": 9,
				"kind": "variable"
			},
			{
				"name": "FooTest",
				"line": 28,
				"members": [
					{
						"endchar": 35,
						"name": "test",
						"line": 28,
						"type": "void()",
						"endline": 28,
						"char": 26,
						"kind": "function"
					}
				],
				"char": 5,
				"kind": "class"
			},
			{
				"name": "BarTest",
				"line": 29,
				"members": [
					{
						"endchar": 35,
						"name": "test",
						"line": 29,
						"type": "void()",
						"endline": 29,
						"char": 26,
						"kind": "function"
					}
				],
				"char": 5,
				"kind": "class"
			},
			{
				"name": "Blergh",
				"line": 30,
				"members": [],
				"char": 15,
				"kind": "class"
			},
			{
				"name": "NotATest",
				"line": 33,
				"members": [
					{
						"endchar": 35,
						"name": "tes",
						"line": 33,
						"type": "void()",
						"endline": 33,
						"char": 27,
						"kind": "function"
					}
				],
				"char": 5,
				"kind": "class"
			},
			{
				"name": "AlsoNotATest",
				"line": 34,
				"members": [
					{
						"endchar": 48,
						"name": "testosterone",
						"line": 34,
						"type": "void()",
						"endline": 34,
						"char": 31,
						"kind": "function"
					}
				],
				"char": 5,
				"kind": "class"
			},
			{
				"endchar": 36,
				"name": "withHidden",
				"line": 36,
				"type": "void()",
				"endline": 36,
				"char": 22,
				"kind": "function"
			},
			{
				"endchar": 28,
				"name": "withoutHidden",
				"line": 37,
				"type": "void()",
				"endline": 37,
				"char": 10,
				"kind": "function"
			},
			{
				"name": "seq",
				"line": 40,
				"type": "AliasSeq!(int, float, string)",
				"char": 5,
				"kind": "alias"
			},
			{
				"name": "StructWithUnitTests",
				"line": 59,
				"members": [
					{
						"name": "SelfSoDontRecurseForever",
						"line": 60,
						"deco": "S13unit_threaded5tests17module_with_tests19StructWithUnitTests",
						"char": 5,
						"kind": "alias"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"name": "RGB",
				"line": 73,
				"deco": "k",
				"char": 1,
				"kind": "alias"
			},
			{
				"members": [
					{
						"endchar": 13,
						"name": "this",
						"line": 79,
						"deco": "FZC13unit_threaded5tests17module_with_tests7Issue83",
						"endline": 79,
						"originalType": "()",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 27,
						"name": "test",
						"line": 80,
						"deco": "FZv",
						"endline": 80,
						"char": 19,
						"kind": "function",
						"overrides": [
							"unit_threaded.testcase.TestCase.test"
						],
						"storageClass": [
							"override"
						]
					}
				],
				"name": "Issue83",
				"line": 78,
				"base": "unit_threaded.testcase.TestCase",
				"char": 1,
				"kind": "class"
			}
		],
		"comment": " A module with tests to test the compile-time reflection\n",
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/tests/parametrized.d",
		"name": "unit_threaded.tests.parametrized",
		"members": [
			{
				"endchar": 5,
				"name": "testValues",
				"line": 13,
				"type": "void(int i)",
				"parameters": [
					{
						"name": "i",
						"deco": "i"
					}
				],
				"endline": 15,
				"char": 10,
				"kind": "function"
			},
			{
				"members": [
					{
						"endchar": 5,
						"name": "testTypes",
						"line": 19,
						"type": "void()",
						"endline": 21,
						"char": 10,
						"kind": "function"
					}
				],
				"name": "testTypes",
				"line": 19,
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 10,
				"kind": "template"
			},
			{
				"endchar": 1,
				"name": "testCartesianFunction",
				"line": 53,
				"deco": "FNaNbNiNfiAyaZv",
				"parameters": [
					{
						"name": "i",
						"deco": "i"
					},
					{
						"name": "s",
						"deco": "Aya"
					}
				],
				"endline": 55,
				"originalType": "(int i, string s)",
				"char": 1,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "testIssue31",
				"line": 58,
				"deco": "FiAyaZv",
				"parameters": [
					{
						"name": "_param_0",
						"deco": "i"
					},
					{
						"name": "_param_1",
						"deco": "Aya"
					}
				],
				"endline": 60,
				"originalType": "void(int, string)",
				"char": 6,
				"kind": "function"
			}
		],
		"comment": " A module with tests to test the compile-time reflection\n",
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/tests/structs_are_not_classes.d",
		"name": "unit_threaded.tests.structs_are_not_classes",
		"members": [
			{
				"name": "Foo",
				"line": 3,
				"members": [
					{
						"endchar": 18,
						"name": "test",
						"line": 4,
						"deco": "FZv",
						"endline": 4,
						"char": 10,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "struct"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/tests/tags.d",
		"name": "unit_threaded.tests.tags",
		"members": [
			{
				"endchar": 5,
				"name": "testMake",
				"line": 14,
				"type": "void()",
				"endline": 18,
				"char": 10,
				"kind": "function"
			}
		],
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/testsuite.d",
		"name": "unit_threaded.testsuite",
		"members": [
			{
				"endchar": 1,
				"name": "runTest",
				"line": 13,
				"deco": "FC13unit_threaded8testcase8TestCaseZAAya",
				"parameters": [
					{
						"name": "test",
						"deco": "C13unit_threaded8testcase8TestCase"
					}
				],
				"endline": 16,
				"originalType": "(from!\"unit_threaded.testcase\".TestCase test)",
				"char": 6,
				"kind": "function",
				"storageClass": [
					"auto"
				]
			},
			{
				"name": "TestSuite",
				"line": 21,
				"comment": " Responsible for running tests and printing output.\n",
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 35,
						"deco": "FNcxS13unit_threaded7options7OptionsxASQBi10reflection8TestDataZSQCi9testsuite9TestSuite",
						"parameters": [
							{
								"name": "options",
								"deco": "xS13unit_threaded7options7Options"
							},
							{
								"name": "testData",
								"deco": "xAS13unit_threaded10reflection8TestData"
							}
						],
						"endline": 38,
						"originalType": "ref (in Options options, in TestData[] testData)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 46,
						"comment": " Params:\n options = The options to run tests with.\n testData = The information about the tests to run.\n output = Where to send text output.\n",
						"deco": "FNcxS13unit_threaded7options7OptionsxASQBi10reflection8TestDataCQCh2io6OutputZSQCw9testsuite9TestSuite",
						"parameters": [
							{
								"name": "options",
								"deco": "xS13unit_threaded7options7Options"
							},
							{
								"name": "testData",
								"deco": "xAS13unit_threaded10reflection8TestData"
							},
							{
								"name": "output",
								"deco": "C13unit_threaded2io6Output"
							}
						],
						"endline": 53,
						"originalType": "ref (in Options options, in TestData[] testData, Output output)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "~this",
						"line": 55,
						"deco": "FZv",
						"endline": 58,
						"char": 5,
						"kind": "destructor"
					},
					{
						"endchar": 5,
						"name": "run",
						"line": 64,
						"comment": " Runs all test cases.\n Returns: true if no test failed, false otherwise.\n",
						"deco": "FZb",
						"endline": 130,
						"char": 10,
						"kind": "function"
					},
					{
						"name": "opAssign",
						"line": 21,
						"deco": "FNcNjS13unit_threaded9testsuite9TestSuiteZQBl",
						"parameters": [
							{
								"name": "p",
								"deco": "S13unit_threaded9testsuite9TestSuite"
							}
						],
						"originalType": "ref return TestSuite(TestSuite p)",
						"char": 1,
						"kind": "generated function"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"endchar": 1,
				"name": "replaceModuleUnitTester",
				"line": 213,
				"comment": " Replace the D runtime's normal unittest block tester. If this is not done,\n the tests will run twice.\n",
				"deco": "FZv",
				"endline": 216,
				"char": 6,
				"kind": "function"
			}
		],
		"comment": " This module implements $(D TestSuite), an aggregator for $(D TestCase)\n objects to run all tests.\n",
		"kind": "module"
	},
	{
		"file": "source/unit_threaded/uda.d",
		"name": "unit_threaded.uda",
		"members": [
			{
				"members": [
					{
						"name": "HasAttribute",
						"line": 14,
						"init": "false",
						"char": 14,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "HasAttribute",
				"line": 7,
				"comment": " For the given module, return true if this module's member has\n the given UDA. UDAs can be types or values.\n",
				"parameters": [
					{
						"name": "module_",
						"kind": "alias"
					},
					{
						"name": "member",
						"deco": "Aya",
						"kind": "value"
					},
					{
						"name": "attribute",
						"kind": "alias"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"members": [
							{
								"name": "isAttribute",
								"line": 39,
								"init": "is(TypeOf!T == A)",
								"char": 10,
								"kind": "variable",
								"storageClass": [
									"enum"
								]
							}
						],
						"name": "isAttribute",
						"line": 39,
						"parameters": [
							{
								"name": "T",
								"kind": "alias"
							}
						],
						"char": 10,
						"kind": "template"
					},
					{
						"name": "GetAttributes",
						"line": 40,
						"type": "Filter!(isAttribute, __traits(getAttributes, mixin(member)))",
						"char": 5,
						"kind": "alias"
					}
				],
				"name": "GetAttributes",
				"line": 34,
				"comment": " For the given module, return true if this module's member has\n the given UDA. UDAs can be types or values.\n",
				"parameters": [
					{
						"name": "module_",
						"kind": "alias"
					},
					{
						"name": "member",
						"deco": "Aya",
						"kind": "value"
					},
					{
						"name": "A",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "isTypesAttr",
						"line": 77,
						"init": "is(T) && is(T : Types!U, U...)",
						"char": 10,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "isTypesAttr",
				"line": 75,
				"parameters": [
					{
						"name": "T",
						"kind": "alias"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "HasTypes",
						"line": 87,
						"init": "GetTypes!T.length > 0",
						"char": 6,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "HasTypes",
				"line": 87,
				"comment": "If a test has the @Types UDA\n",
				"parameters": [
					{
						"name": "T",
						"kind": "alias"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "GetTypes",
						"line": 95,
						"type": "AliasSeq!()",
						"char": 9,
						"kind": "alias"
					}
				],
				"name": "GetTypes",
				"line": 90,
				"comment": "Returns the types in the @Types UDA associated to a test\nExample:\n$(DDOX_UNITTEST_HEADER __unittest_source_unit_threaded_uda_d_107_1)\n---\nimport unit_threaded.attrs;\nimport std.meta;\n\n@Types!(int, float) int i;\nstatic assert(HasTypes!i);\nstatic assert(is(GetTypes!i == AliasSeq!(int, float)));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_source_unit_threaded_uda_d_107_1)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "alias"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "hasUtUDA",
						"line": 120,
						"init": "getUtUDAs!(symbol, attribute).length > 0",
						"char": 6,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "hasUtUDA",
				"line": 120,
				"parameters": [
					{
						"name": "symbol",
						"kind": "alias"
					},
					{
						"name": "attribute",
						"kind": "alias"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"members": [
							{
								"name": "isDesiredUDA",
								"line": 132,
								"init": "toCheck == attribute",
								"char": 22,
								"kind": "variable",
								"storageClass": [
									"enum"
								]
							}
						],
						"name": "isDesiredUDA",
						"line": 127,
						"parameters": [
							{
								"name": "toCheck",
								"kind": "alias"
							}
						],
						"char": 5,
						"kind": "template"
					},
					{
						"name": "getUtUDAs",
						"line": 149,
						"type": "Filter!(isDesiredUDA, __traits(getAttributes, symbol))",
						"char": 5,
						"kind": "alias"
					}
				],
				"name": "getUtUDAs",
				"line": 122,
				"parameters": [
					{
						"name": "symbol",
						"kind": "alias"
					},
					{
						"name": "attribute",
						"kind": "alias"
					}
				],
				"char": 1,
				"kind": "template"
			}
		],
		"kind": "module"
	}
]